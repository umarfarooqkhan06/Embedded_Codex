
F401RE_MAX30102_HR_SPO2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006834  08006834  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800683c  0800683c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800683c  0800683c  0000783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006844  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c50  20000068  080068ac  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cb8  080068ac  00008cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baeb  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  00013b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  000157a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000890  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e1b  00000000  00000000  00016b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df90  00000000  00000000  0002d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a34f  00000000  00000000  0003b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  000c5c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c91a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006240 	.word	0x08006240

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006240 	.word	0x08006240

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Max30102_WriteReg>:

/**
 * @brief Write data to MAX30102 register
 */
MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <Max30102_WriteReg+0x44>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	21ae      	movs	r1, #174	@ 0xae
 80005d6:	f002 fdf5 	bl	80031c4 <HAL_I2C_Mem_Write>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <Max30102_WriteReg+0x38>
        return MAX30102_OK;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <Max30102_WriteReg+0x3a>
    return MAX30102_ERROR;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084

080005f4 <Max30102_ReadReg>:

/**
 * @brief Read data from MAX30102 register
 */
MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
    if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <Max30102_ReadReg+0x40>)
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	21ae      	movs	r1, #174	@ 0xae
 800061a:	f002 fecd 	bl	80033b8 <HAL_I2C_Mem_Read>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <Max30102_ReadReg+0x34>
        return MAX30102_OK;
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <Max30102_ReadReg+0x36>
    return MAX30102_ERROR;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000084 	.word	0x20000084

08000638 <Max30102_WriteRegisterBit>:

/**
 * @brief Write specific bit in register
 */
MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 800064a:	f107 020f 	add.w	r2, r7, #15
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffce 	bl	80005f4 <Max30102_ReadReg>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d001      	beq.n	8000662 <Max30102_WriteRegisterBit+0x2a>
        return MAX30102_ERROR;
 800065e:	2300      	movs	r3, #0
 8000660:	e025      	b.n	80006ae <Max30102_WriteRegisterBit+0x76>
    tmp &= ~(1<<Bit);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2201      	movs	r2, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	b25a      	sxtb	r2, r3
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	4013      	ands	r3, r2
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
    tmp |= (Value&0x01)<<Bit;
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	f003 0201 	and.w	r2, r3, #1
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	b25a      	sxtb	r2, r3
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b25b      	sxtb	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 8000696:	7bfa      	ldrb	r2, [r7, #15]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff85 	bl	80005ac <Max30102_WriteReg>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d001      	beq.n	80006ac <Max30102_WriteRegisterBit+0x74>
        return MAX30102_ERROR;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e000      	b.n	80006ae <Max30102_WriteRegisterBit+0x76>
    return MAX30102_OK;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <Max30102_ReadFifo>:

/**
 * @brief Read FIFO data (Red and IR)
 */
MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af04      	add	r7, sp, #16
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
    uint32_t un_temp;
    *pun_red_led = 0;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
    *pun_ir_led = 0;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
    uint8_t ach_i2c_data[6];

    if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80006ce:	4b30      	ldr	r3, [pc, #192]	@ (8000790 <Max30102_ReadFifo+0xd8>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	2306      	movs	r3, #6
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	2207      	movs	r2, #7
 80006e6:	21ae      	movs	r1, #174	@ 0xae
 80006e8:	f002 fe66 	bl	80033b8 <HAL_I2C_Mem_Read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <Max30102_ReadFifo+0x3e>
    {
        return MAX30102_ERROR;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e048      	b.n	8000788 <Max30102_ReadFifo+0xd0>
    }

    // Parse Red LED data (first 3 bytes)
    un_temp = (unsigned char) ach_i2c_data[0];
 80006f6:	7b3b      	ldrb	r3, [r7, #12]
 80006f8:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	441a      	add	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	601a      	str	r2, [r3, #0]
    un_temp = (unsigned char) ach_i2c_data[1];
 800070c:	7b7b      	ldrb	r3, [r7, #13]
 800070e:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	441a      	add	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
    un_temp = (unsigned char) ach_i2c_data[2];
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	441a      	add	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]

    // Parse IR LED data (next 3 bytes)
    un_temp = (unsigned char) ach_i2c_data[3];
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	441a      	add	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	601a      	str	r2, [r3, #0]
    un_temp = (unsigned char) ach_i2c_data[4];
 8000748:	7c3b      	ldrb	r3, [r7, #16]
 800074a:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	441a      	add	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	601a      	str	r2, [r3, #0]
    un_temp = (unsigned char) ach_i2c_data[5];
 800075e:	7c7b      	ldrb	r3, [r7, #17]
 8000760:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	441a      	add	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	601a      	str	r2, [r3, #0]

    // Mask MSB [23:18]
    *pun_red_led &= 0x03FFFF;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
    *pun_ir_led &= 0x03FFFF;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	601a      	str	r2, [r3, #0]

    return MAX30102_OK;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084

08000794 <Max30102_SetIntAlmostFullEnabled>:

/**
 * @brief Enable/Disable FIFO Almost Full interrupt
 */
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
    return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	461a      	mov	r2, r3
 80007a2:	2107      	movs	r1, #7
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff ff47 	bl	8000638 <Max30102_WriteRegisterBit>
 80007aa:	4603      	mov	r3, r0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Max30102_SetIntFifoDataReadyEnabled>:

/**
 * @brief Enable/Disable FIFO Data Ready interrupt
 */
MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
    return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2106      	movs	r1, #6
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff ff37 	bl	8000638 <Max30102_WriteRegisterBit>
 80007ca:	4603      	mov	r3, r0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Max30102_ReadInterruptStatus>:

/**
 * @brief Read interrupt status registers
 */
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    uint8_t tmp;
    *Status = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]

    if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 80007e2:	f107 030f 	add.w	r3, r7, #15
 80007e6:	4619      	mov	r1, r3
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ff03 	bl	80005f4 <Max30102_ReadReg>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d001      	beq.n	80007f8 <Max30102_ReadInterruptStatus+0x24>
        return MAX30102_ERROR;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00d      	b.n	8000814 <Max30102_ReadInterruptStatus+0x40>
    *Status |= tmp & 0xE1; // Mask relevant bits
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	b25b      	sxtb	r3, r3
 8000802:	f023 031e 	bic.w	r3, r3, #30
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	701a      	strb	r2, [r3, #0]

    return MAX30102_OK;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <Max30102_InterruptCallback>:

/**
 * @brief Interrupt callback function - called from EXTI interrupt
 */
void Max30102_InterruptCallback(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
    uint8_t Status;
    while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 8000822:	bf00      	nop
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffd4 	bl	80007d4 <Max30102_ReadInterruptStatus>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d1f8      	bne.n	8000824 <Max30102_InterruptCallback+0x8>

    // Almost Full FIFO Interrupt
    if(Status & (1<<INT_A_FULL_BIT))
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	da4a      	bge.n	80008d0 <Max30102_InterruptCallback+0xb4>
    {
        for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e044      	b.n	80008ca <Max30102_InterruptCallback+0xae>
        {
            while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000840:	bf00      	nop
 8000842:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4a48      	ldr	r2, [pc, #288]	@ (800096c <Max30102_InterruptCallback+0x150>)
 800084a:	441a      	add	r2, r3
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4947      	ldr	r1, [pc, #284]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 8000854:	440b      	add	r3, r1
 8000856:	4619      	mov	r1, r3
 8000858:	4610      	mov	r0, r2
 800085a:	f7ff ff2d 	bl	80006b8 <Max30102_ReadFifo>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d1ee      	bne.n	8000842 <Max30102_InterruptCallback+0x26>

            // Check finger detection
            if(IsFingerOnScreen)
 8000864:	4b43      	ldr	r3, [pc, #268]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00c      	beq.n	8000888 <Max30102_InterruptCallback+0x6c>
            {
                if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR)
 800086e:	4b3e      	ldr	r3, [pc, #248]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a3f      	ldr	r2, [pc, #252]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800087c:	4293      	cmp	r3, r2
 800087e:	d80e      	bhi.n	800089e <Max30102_InterruptCallback+0x82>
                    IsFingerOnScreen = 0;
 8000880:	4b3c      	ldr	r3, [pc, #240]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e00a      	b.n	800089e <Max30102_InterruptCallback+0x82>
            }
            else
            {
                if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR)
 8000888:	4b37      	ldr	r3, [pc, #220]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a38      	ldr	r2, [pc, #224]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000896:	d902      	bls.n	800089e <Max30102_InterruptCallback+0x82>
                    IsFingerOnScreen = 1;
 8000898:	4b36      	ldr	r3, [pc, #216]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
            }

            BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 800089e:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <Max30102_InterruptCallback+0x15c>)
 80008a6:	fba3 1302 	umull	r1, r3, r3, r2
 80008aa:	099b      	lsrs	r3, r3, #6
 80008ac:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80008b0:	fb01 f303 	mul.w	r3, r1, r3
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 80008b8:	6013      	str	r3, [r2, #0]
            CollectedSamples++;
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <Max30102_InterruptCallback+0x160>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4a2e      	ldr	r2, [pc, #184]	@ (800097c <Max30102_InterruptCallback+0x160>)
 80008c2:	6013      	str	r3, [r2, #0]
        for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d9b7      	bls.n	8000840 <Max30102_InterruptCallback+0x24>
        }
    }

    // New FIFO Data Ready Interrupt
    if(Status & (1<<INT_PPG_RDY_BIT))
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d041      	beq.n	800095e <Max30102_InterruptCallback+0x142>
    {
        while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 80008da:	bf00      	nop
 80008dc:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4a22      	ldr	r2, [pc, #136]	@ (800096c <Max30102_InterruptCallback+0x150>)
 80008e4:	441a      	add	r2, r3
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4920      	ldr	r1, [pc, #128]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 80008ee:	440b      	add	r3, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4610      	mov	r0, r2
 80008f4:	f7ff fee0 	bl	80006b8 <Max30102_ReadFifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d1ee      	bne.n	80008dc <Max30102_InterruptCallback+0xc0>

        // Check finger detection
        if(IsFingerOnScreen)
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00c      	beq.n	8000922 <Max30102_InterruptCallback+0x106>
        {
            if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR)
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000916:	4293      	cmp	r3, r2
 8000918:	d80e      	bhi.n	8000938 <Max30102_InterruptCallback+0x11c>
                IsFingerOnScreen = 0;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e00a      	b.n	8000938 <Max30102_InterruptCallback+0x11c>
        }
        else
        {
            if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR)
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <Max30102_InterruptCallback+0x154>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000930:	d902      	bls.n	8000938 <Max30102_InterruptCallback+0x11c>
                IsFingerOnScreen = 1;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <Max30102_InterruptCallback+0x158>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
        }

        BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <Max30102_InterruptCallback+0x15c>)
 8000940:	fba3 1302 	umull	r1, r3, r3, r2
 8000944:	099b      	lsrs	r3, r3, #6
 8000946:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <Max30102_InterruptCallback+0x14c>)
 8000952:	6013      	str	r3, [r2, #0]
        CollectedSamples++;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <Max30102_InterruptCallback+0x160>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <Max30102_InterruptCallback+0x160>)
 800095c:	6013      	str	r3, [r2, #0]
    // Power Ready
    if(Status & (1<<INT_PWR_RDY_BIT))
    {
        // Handle if needed
    }
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20001348 	.word	0x20001348
 800096c:	200009e8 	.word	0x200009e8
 8000970:	20000088 	.word	0x20000088
 8000974:	20001354 	.word	0x20001354
 8000978:	1b4e81b5 	.word	0x1b4e81b5
 800097c:	20001350 	.word	0x20001350

08000980 <Max30102_FifoWritePointer>:

/**
 * @brief Set FIFO write pointer
 */
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR, (Address & 0x1F)))
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	2004      	movs	r0, #4
 8000996:	f7ff fe09 	bl	80005ac <Max30102_WriteReg>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d001      	beq.n	80009a4 <Max30102_FifoWritePointer+0x24>
        return MAX30102_ERROR;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e000      	b.n	80009a6 <Max30102_FifoWritePointer+0x26>
    return MAX30102_OK;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <Max30102_FifoOverflowCounter>:

/**
 * @brief Set FIFO overflow counter
 */
MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER, (Address & 0x1F)))
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 031f 	and.w	r3, r3, #31
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	2005      	movs	r0, #5
 80009c4:	f7ff fdf2 	bl	80005ac <Max30102_WriteReg>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d001      	beq.n	80009d2 <Max30102_FifoOverflowCounter+0x24>
        return MAX30102_ERROR;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <Max30102_FifoOverflowCounter+0x26>
    return MAX30102_OK;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <Max30102_FifoReadPointer>:

/**
 * @brief Set FIFO read pointer
 */
MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR, (Address & 0x1F)))
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4619      	mov	r1, r3
 80009f0:	2006      	movs	r0, #6
 80009f2:	f7ff fddb 	bl	80005ac <Max30102_WriteReg>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d001      	beq.n	8000a00 <Max30102_FifoReadPointer+0x24>
        return MAX30102_ERROR;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e000      	b.n	8000a02 <Max30102_FifoReadPointer+0x26>
    return MAX30102_OK;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <Max30102_FifoSampleAveraging>:

/**
 * @brief Set FIFO sample averaging
 */
MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2008      	movs	r0, #8
 8000a1c:	f7ff fdea 	bl	80005f4 <Max30102_ReadReg>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d001      	beq.n	8000a2a <Max30102_FifoSampleAveraging+0x20>
        return MAX30102_ERROR;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e019      	b.n	8000a5e <Max30102_FifoSampleAveraging+0x54>
    tmp &= ~(0x07 << 5);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	f003 031f 	and.w	r3, r3, #31
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]
    tmp |= (Value & 0x07) << 5;
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	015b      	lsls	r3, r3, #5
 8000a3a:	b25a      	sxtb	r2, r3
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2008      	movs	r0, #8
 8000a4e:	f7ff fdad 	bl	80005ac <Max30102_WriteReg>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d001      	beq.n	8000a5c <Max30102_FifoSampleAveraging+0x52>
        return MAX30102_ERROR;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e000      	b.n	8000a5e <Max30102_FifoSampleAveraging+0x54>
    return MAX30102_OK;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <Max30102_FifoRolloverEnable>:

/**
 * @brief Enable/Disable FIFO rollover
 */
MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
    return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	f7ff fddb 	bl	8000638 <Max30102_WriteRegisterBit>
 8000a82:	4603      	mov	r3, r0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <Max30102_FifoAlmostFullValue>:

/**
 * @brief Set FIFO almost full value
 */
MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
    if(Value < 17) Value = 17;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b10      	cmp	r3, #16
 8000a9a:	d801      	bhi.n	8000aa0 <Max30102_FifoAlmostFullValue+0x14>
 8000a9c:	2311      	movs	r3, #17
 8000a9e:	71fb      	strb	r3, [r7, #7]
    if(Value > 32) Value = 32;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d901      	bls.n	8000aaa <Max30102_FifoAlmostFullValue+0x1e>
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	71fb      	strb	r3, [r7, #7]
    Value = 32 - Value;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f1c3 0320 	rsb	r3, r3, #32
 8000ab0:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8000ab2:	f107 030f 	add.w	r3, r7, #15
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2008      	movs	r0, #8
 8000aba:	f7ff fd9b 	bl	80005f4 <Max30102_ReadReg>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d001      	beq.n	8000ac8 <Max30102_FifoAlmostFullValue+0x3c>
        return MAX30102_ERROR;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e01a      	b.n	8000afe <Max30102_FifoAlmostFullValue+0x72>
    tmp &= ~(0x0F);
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	f023 030f 	bic.w	r3, r3, #15
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	73fb      	strb	r3, [r7, #15]
    tmp |= (Value & 0x0F);
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	b25a      	sxtb	r2, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2008      	movs	r0, #8
 8000aee:	f7ff fd5d 	bl	80005ac <Max30102_WriteReg>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d001      	beq.n	8000afc <Max30102_FifoAlmostFullValue+0x70>
        return MAX30102_ERROR;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e000      	b.n	8000afe <Max30102_FifoAlmostFullValue+0x72>
    return MAX30102_OK;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <Max30102_Reset>:

/**
 * @brief Reset MAX30102
 */
MAX30102_STATUS Max30102_Reset(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
    uint8_t tmp = 0xFF;
 8000b0c:	23ff      	movs	r3, #255	@ 0xff
 8000b0e:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, 0x40))
 8000b10:	2140      	movs	r1, #64	@ 0x40
 8000b12:	2009      	movs	r0, #9
 8000b14:	f7ff fd4a 	bl	80005ac <Max30102_WriteReg>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d001      	beq.n	8000b22 <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e00f      	b.n	8000b42 <Max30102_Reset+0x3c>
    do
    {
        if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	4619      	mov	r1, r3
 8000b26:	2009      	movs	r0, #9
 8000b28:	f7ff fd64 	bl	80005f4 <Max30102_ReadReg>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d001      	beq.n	8000b36 <Max30102_Reset+0x30>
            return MAX30102_ERROR;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e005      	b.n	8000b42 <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f0      	bne.n	8000b22 <Max30102_Reset+0x1c>

    return MAX30102_OK;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <Max30102_SetMode>:

/**
 * @brief Set operation mode
 */
MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8000b54:	f107 030f 	add.w	r3, r7, #15
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2009      	movs	r0, #9
 8000b5c:	f7ff fd4a 	bl	80005f4 <Max30102_ReadReg>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d001      	beq.n	8000b6a <Max30102_SetMode+0x20>
        return MAX30102_ERROR;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e01a      	b.n	8000ba0 <Max30102_SetMode+0x56>
    tmp &= ~(0x07);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f023 0307 	bic.w	r3, r3, #7
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	73fb      	strb	r3, [r7, #15]
    tmp |= (Mode & 0x07);
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	b25a      	sxtb	r2, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2009      	movs	r0, #9
 8000b90:	f7ff fd0c 	bl	80005ac <Max30102_WriteReg>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d001      	beq.n	8000b9e <Max30102_SetMode+0x54>
        return MAX30102_ERROR;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <Max30102_SetMode+0x56>
    return MAX30102_OK;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Max30102_SpO2AdcRange>:

/**
 * @brief Set SpO2 ADC range
 */
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8000bb2:	f107 030f 	add.w	r3, r7, #15
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f7ff fd1b 	bl	80005f4 <Max30102_ReadReg>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d001      	beq.n	8000bc8 <Max30102_SpO2AdcRange+0x20>
        return MAX30102_ERROR;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e01c      	b.n	8000c02 <Max30102_SpO2AdcRange+0x5a>
    tmp &= ~(0x03 << 5);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	73fb      	strb	r3, [r7, #15]
    tmp |= ((Value & 0x03) << 5);
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f7ff fcdb 	bl	80005ac <Max30102_WriteReg>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d001      	beq.n	8000c00 <Max30102_SpO2AdcRange+0x58>
        return MAX30102_ERROR;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e000      	b.n	8000c02 <Max30102_SpO2AdcRange+0x5a>
    return MAX30102_OK;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <Max30102_SpO2SampleRate>:

/**
 * @brief Set SpO2 sample rate
 */
MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8000c14:	f107 030f 	add.w	r3, r7, #15
 8000c18:	4619      	mov	r1, r3
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f7ff fcea 	bl	80005f4 <Max30102_ReadReg>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d001      	beq.n	8000c2a <Max30102_SpO2SampleRate+0x20>
        return MAX30102_ERROR;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01c      	b.n	8000c64 <Max30102_SpO2SampleRate+0x5a>
    tmp &= ~(0x07 << 2);
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	f023 031c 	bic.w	r3, r3, #28
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73fb      	strb	r3, [r7, #15]
    tmp |= ((Value & 0x07) << 2);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	f003 031c 	and.w	r3, r3, #28
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4619      	mov	r1, r3
 8000c52:	200a      	movs	r0, #10
 8000c54:	f7ff fcaa 	bl	80005ac <Max30102_WriteReg>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <Max30102_SpO2SampleRate+0x58>
        return MAX30102_ERROR;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <Max30102_SpO2SampleRate+0x5a>
    return MAX30102_OK;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <Max30102_SpO2LedPulseWidth>:

/**
 * @brief Set LED pulse width
 */
MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;
    if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f7ff fcb9 	bl	80005f4 <Max30102_ReadReg>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d001      	beq.n	8000c8c <Max30102_SpO2LedPulseWidth+0x20>
        return MAX30102_ERROR;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e01a      	b.n	8000cc2 <Max30102_SpO2LedPulseWidth+0x56>
    tmp &= ~(0x03);
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	73fb      	strb	r3, [r7, #15]
    tmp |= (Value & 0x03);
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	73fb      	strb	r3, [r7, #15]
    if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f7ff fc7b 	bl	80005ac <Max30102_WriteReg>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d001      	beq.n	8000cc0 <Max30102_SpO2LedPulseWidth+0x54>
        return MAX30102_ERROR;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <Max30102_SpO2LedPulseWidth+0x56>
    return MAX30102_OK;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <Max30102_Led1PulseAmplitude>:

/**
 * @brief Set LED1 (Red) pulse amplitude
 */
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	200c      	movs	r0, #12
 8000cda:	f7ff fc67 	bl	80005ac <Max30102_WriteReg>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d001      	beq.n	8000ce8 <Max30102_Led1PulseAmplitude+0x1e>
        return MAX30102_ERROR;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e000      	b.n	8000cea <Max30102_Led1PulseAmplitude+0x20>
    return MAX30102_OK;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <Max30102_Led2PulseAmplitude>:

/**
 * @brief Set LED2 (IR) pulse amplitude
 */
MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	200d      	movs	r0, #13
 8000d02:	f7ff fc53 	bl	80005ac <Max30102_WriteReg>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d001      	beq.n	8000d10 <Max30102_Led2PulseAmplitude+0x1e>
        return MAX30102_ERROR;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e000      	b.n	8000d12 <Max30102_Led2PulseAmplitude+0x20>
    return MAX30102_OK;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <Max30102_IsFingerOnSensor>:

/**
 * @brief Check if finger is on sensor
 */
MAX30102_STATUS Max30102_IsFingerOnSensor(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
    return IsFingerOnScreen;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <Max30102_IsFingerOnSensor+0x14>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20001354 	.word	0x20001354

08000d34 <Max30102_GetHeartRate>:

/**
 * @brief Get calculated heart rate
 */
int32_t Max30102_GetHeartRate(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
    return HeartRate;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <Max30102_GetHeartRate+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20001360 	.word	0x20001360

08000d4c <Max30102_GetSpO2Value>:

/**
 * @brief Get calculated SpO2 value
 */
int32_t Max30102_GetSpO2Value(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    return Sp02Value;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <Max30102_GetSpO2Value+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20001358 	.word	0x20001358

08000d64 <Max30102_Task>:

/**
 * @brief Main task function - state machine
 */
void Max30102_Task(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af04      	add	r7, sp, #16
    switch(StateMachine)
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	f200 8092 	bhi.w	8000e98 <Max30102_Task+0x134>
 8000d74:	a201      	add	r2, pc, #4	@ (adr r2, 8000d7c <Max30102_Task+0x18>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000dc5 	.word	0x08000dc5
 8000d84:	08000df5 	.word	0x08000df5
 8000d88:	08000e61 	.word	0x08000e61
    {
        case MAX30102_STATE_BEGIN:
            HeartRate = 0;
 8000d8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ea4 <Max30102_Task+0x140>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
            Sp02Value = 0;
 8000d92:	4b45      	ldr	r3, [pc, #276]	@ (8000ea8 <Max30102_Task+0x144>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
            if(IsFingerOnScreen)
 8000d98:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <Max30102_Task+0x148>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d075      	beq.n	8000e8e <Max30102_Task+0x12a>
            {
                CollectedSamples = 0;
 8000da2:	4b43      	ldr	r3, [pc, #268]	@ (8000eb0 <Max30102_Task+0x14c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
                BufferTail = BufferHead;
 8000da8:	4b42      	ldr	r3, [pc, #264]	@ (8000eb4 <Max30102_Task+0x150>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a42      	ldr	r2, [pc, #264]	@ (8000eb8 <Max30102_Task+0x154>)
 8000dae:	6013      	str	r3, [r2, #0]
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8000db0:	2024      	movs	r0, #36	@ 0x24
 8000db2:	f7ff ff8a 	bl	8000cca <Max30102_Led1PulseAmplitude>
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8000db6:	2024      	movs	r0, #36	@ 0x24
 8000db8:	f7ff ff9b 	bl	8000cf2 <Max30102_Led2PulseAmplitude>
                StateMachine = MAX30102_STATE_CALIBRATE;
 8000dbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000dc2:	e064      	b.n	8000e8e <Max30102_Task+0x12a>

        case MAX30102_STATE_CALIBRATE:
            if(IsFingerOnScreen)
 8000dc4:	4b39      	ldr	r3, [pc, #228]	@ (8000eac <Max30102_Task+0x148>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <Max30102_Task+0x7c>
            {
                if(CollectedSamples > (MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND))
 8000dce:	4b38      	ldr	r3, [pc, #224]	@ (8000eb0 <Max30102_Task+0x14c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dd6:	d95c      	bls.n	8000e92 <Max30102_Task+0x12e>
                {
                    StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	701a      	strb	r2, [r3, #0]
            {
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
                StateMachine = MAX30102_STATE_BEGIN;
            }
            break;
 8000dde:	e058      	b.n	8000e92 <Max30102_Task+0x12e>
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ff72 	bl	8000cca <Max30102_Led1PulseAmplitude>
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff ff83 	bl	8000cf2 <Max30102_Led2PulseAmplitude>
                StateMachine = MAX30102_STATE_BEGIN;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
            break;
 8000df2:	e04e      	b.n	8000e92 <Max30102_Task+0x12e>

        case MAX30102_STATE_CALCULATE_HR:
            if(IsFingerOnScreen)
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <Max30102_Task+0x148>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d026      	beq.n	8000e4c <Max30102_Task+0xe8>
            {
                maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer,
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <Max30102_Task+0x154>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <Max30102_Task+0x158>)
 8000e06:	9203      	str	r2, [sp, #12]
 8000e08:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <Max30102_Task+0x140>)
 8000e0a:	9202      	str	r2, [sp, #8]
 8000e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec0 <Max30102_Task+0x15c>)
 8000e0e:	9201      	str	r2, [sp, #4]
 8000e10:	4a25      	ldr	r2, [pc, #148]	@ (8000ea8 <Max30102_Task+0x144>)
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e18:	492a      	ldr	r1, [pc, #168]	@ (8000ec4 <Max30102_Task+0x160>)
 8000e1a:	482b      	ldr	r0, [pc, #172]	@ (8000ec8 <Max30102_Task+0x164>)
 8000e1c:	f000 f90c 	bl	8001038 <maxim_heart_rate_and_oxygen_saturation>
                    MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND,
                    BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);

                BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8000e20:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <Max30102_Task+0x154>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000e28:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <Max30102_Task+0x168>)
 8000e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e2e:	099b      	lsrs	r3, r3, #6
 8000e30:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <Max30102_Task+0x154>)
 8000e3c:	6013      	str	r3, [r2, #0]
                CollectedSamples = 0;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <Max30102_Task+0x14c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
                StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000e46:	2203      	movs	r2, #3
 8000e48:	701a      	strb	r2, [r3, #0]
            {
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
                StateMachine = MAX30102_STATE_BEGIN;
            }
            break;
 8000e4a:	e025      	b.n	8000e98 <Max30102_Task+0x134>
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff ff3c 	bl	8000cca <Max30102_Led1PulseAmplitude>
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff ff4d 	bl	8000cf2 <Max30102_Led2PulseAmplitude>
                StateMachine = MAX30102_STATE_BEGIN;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
            break;
 8000e5e:	e01b      	b.n	8000e98 <Max30102_Task+0x134>

        case MAX30102_STATE_COLLECT_NEXT_PORTION:
            if(IsFingerOnScreen)
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <Max30102_Task+0x148>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <Max30102_Task+0x116>
            {
                if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <Max30102_Task+0x14c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b64      	cmp	r3, #100	@ 0x64
 8000e70:	d911      	bls.n	8000e96 <Max30102_Task+0x132>
                {
                    StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	701a      	strb	r2, [r3, #0]
            {
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
                StateMachine = MAX30102_STATE_BEGIN;
            }
            break;
 8000e78:	e00d      	b.n	8000e96 <Max30102_Task+0x132>
                Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff ff25 	bl	8000cca <Max30102_Led1PulseAmplitude>
                Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff ff36 	bl	8000cf2 <Max30102_Led2PulseAmplitude>
                StateMachine = MAX30102_STATE_BEGIN;
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <Max30102_Task+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
            break;
 8000e8c:	e003      	b.n	8000e96 <Max30102_Task+0x132>
            break;
 8000e8e:	bf00      	nop
 8000e90:	e002      	b.n	8000e98 <Max30102_Task+0x134>
            break;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <Max30102_Task+0x134>
            break;
 8000e96:	bf00      	nop
    }
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001365 	.word	0x20001365
 8000ea4:	20001360 	.word	0x20001360
 8000ea8:	20001358 	.word	0x20001358
 8000eac:	20001354 	.word	0x20001354
 8000eb0:	20001350 	.word	0x20001350
 8000eb4:	20001348 	.word	0x20001348
 8000eb8:	2000134c 	.word	0x2000134c
 8000ebc:	20001364 	.word	0x20001364
 8000ec0:	2000135c 	.word	0x2000135c
 8000ec4:	200009e8 	.word	0x200009e8
 8000ec8:	20000088 	.word	0x20000088
 8000ecc:	1b4e81b5 	.word	0x1b4e81b5

08000ed0 <Max30102_Init>:

/**
 * @brief Initialize MAX30102 sensor
 */
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    uint8_t uch_dummy;
    i2c_max30102 = i2c;
 8000ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8001018 <Max30102_Init+0x148>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]

    // Reset the MAX30102
    if(MAX30102_OK != Max30102_Reset())
 8000ede:	f7ff fe12 	bl	8000b06 <Max30102_Reset>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d001      	beq.n	8000eec <Max30102_Init+0x1c>
        return MAX30102_ERROR;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e090      	b.n	800100e <Max30102_Init+0x13e>

    // Read a dummy register to verify communication
    if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &uch_dummy))
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fb7e 	bl	80005f4 <Max30102_ReadReg>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <Max30102_Init+0x32>
        return MAX30102_ERROR;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e085      	b.n	800100e <Max30102_Init+0x13e>

    // Configure FIFO
    if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fd3c 	bl	8000980 <Max30102_FifoWritePointer>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <Max30102_Init+0x42>
        return MAX30102_ERROR;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e07d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fd4b 	bl	80009ae <Max30102_FifoOverflowCounter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <Max30102_Init+0x52>
        return MAX30102_ERROR;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e075      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff fd5a 	bl	80009dc <Max30102_FifoReadPointer>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <Max30102_Init+0x62>
        return MAX30102_ERROR;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e06d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fd69 	bl	8000a0a <Max30102_FifoSampleAveraging>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d001      	beq.n	8000f42 <Max30102_Init+0x72>
        return MAX30102_ERROR;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e065      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fd8f 	bl	8000a66 <Max30102_FifoRolloverEnable>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <Max30102_Init+0x82>
        return MAX30102_ERROR;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e05d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8000f52:	2011      	movs	r0, #17
 8000f54:	f7ff fd9a 	bl	8000a8c <Max30102_FifoAlmostFullValue>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d001      	beq.n	8000f62 <Max30102_Init+0x92>
        return MAX30102_ERROR;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e055      	b.n	800100e <Max30102_Init+0x13e>

    // Set SpO2 mode
    if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8000f62:	2003      	movs	r0, #3
 8000f64:	f7ff fdf1 	bl	8000b4a <Max30102_SetMode>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d001      	beq.n	8000f72 <Max30102_Init+0xa2>
        return MAX30102_ERROR;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e04d      	b.n	800100e <Max30102_Init+0x13e>

    // Configure SpO2 settings
    if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff fe18 	bl	8000ba8 <Max30102_SpO2AdcRange>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d001      	beq.n	8000f82 <Max30102_Init+0xb2>
        return MAX30102_ERROR;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e045      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fe41 	bl	8000c0a <Max30102_SpO2SampleRate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d001      	beq.n	8000f92 <Max30102_Init+0xc2>
        return MAX30102_ERROR;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e03d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8000f92:	2003      	movs	r0, #3
 8000f94:	f7ff fe6a 	bl	8000c6c <Max30102_SpO2LedPulseWidth>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d001      	beq.n	8000fa2 <Max30102_Init+0xd2>
        return MAX30102_ERROR;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e035      	b.n	800100e <Max30102_Init+0x13e>

    // Set initial LED currents (low)
    if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fe91 	bl	8000cca <Max30102_Led1PulseAmplitude>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <Max30102_Init+0xe2>
        return MAX30102_ERROR;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e02d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fe9d 	bl	8000cf2 <Max30102_Led2PulseAmplitude>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d001      	beq.n	8000fc2 <Max30102_Init+0xf2>
        return MAX30102_ERROR;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e025      	b.n	800100e <Max30102_Init+0x13e>

    // Enable interrupts
    if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff fbe6 	bl	8000794 <Max30102_SetIntAlmostFullEnabled>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d001      	beq.n	8000fd2 <Max30102_Init+0x102>
        return MAX30102_ERROR;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01d      	b.n	800100e <Max30102_Init+0x13e>
    if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fbee 	bl	80007b4 <Max30102_SetIntFifoDataReadyEnabled>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d001      	beq.n	8000fe2 <Max30102_Init+0x112>
        return MAX30102_ERROR;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e015      	b.n	800100e <Max30102_Init+0x13e>

    // Initialize state machine
    StateMachine = MAX30102_STATE_BEGIN;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <Max30102_Init+0x14c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    BufferHead = 0;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <Max30102_Init+0x150>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
    BufferTail = 0;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <Max30102_Init+0x154>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    CollectedSamples = 0;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <Max30102_Init+0x158>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    IsFingerOnScreen = 0;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <Max30102_Init+0x15c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
    HeartRate = 0;
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Max30102_Init+0x160>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
    Sp02Value = 0;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <Max30102_Init+0x164>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

    return MAX30102_OK;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000084 	.word	0x20000084
 800101c:	20001365 	.word	0x20001365
 8001020:	20001348 	.word	0x20001348
 8001024:	2000134c 	.word	0x2000134c
 8001028:	20001350 	.word	0x20001350
 800102c:	20001354 	.word	0x20001354
 8001030:	20001360 	.word	0x20001360
 8001034:	20001358 	.word	0x20001358

08001038 <maxim_heart_rate_and_oxygen_saturation>:
                                           uint16_t un_offset,
                                           int32_t *pn_spo2,
                                           int8_t *pch_spo2_valid,
                                           int32_t *pn_heart_rate,
                                           int8_t *pch_hr_valid)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b0d3      	sub	sp, #332	@ 0x14c
 800103c:	af04      	add	r7, sp, #16
 800103e:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8001042:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8001046:	6020      	str	r0, [r4, #0]
 8001048:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800104c:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8001050:	6001      	str	r1, [r0, #0]
 8001052:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001056:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800105a:	600a      	str	r2, [r1, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001062:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8001066:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    uint32_t un_offset_tmp = un_offset;
 8001068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800106c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    // Remove DC of IR signal
    un_ir_mean = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (k = 0; k < n_buffer_length; k++)
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001082:	e021      	b.n	80010c8 <maxim_heart_rate_and_oxygen_saturation+0x90>
    {
        un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8001084:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800108e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	4413      	add	r3, r2
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800109c:	4413      	add	r3, r2
 800109e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80010a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010a6:	3301      	adds	r3, #1
 80010a8:	4ad4      	ldr	r2, [pc, #848]	@ (80013fc <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 80010aa:	fba2 1203 	umull	r1, r2, r2, r3
 80010ae:	0992      	lsrs	r2, r2, #6
 80010b0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80010b4:	fb01 f202 	mul.w	r2, r1, r2
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k = 0; k < n_buffer_length; k++)
 80010be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80010c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010d0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbd4      	blt.n	8001084 <maxim_heart_rate_and_oxygen_saturation+0x4c>
    }

    un_ir_mean = un_ir_mean / n_buffer_length;
 80010da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80010e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    un_offset_tmp = un_offset;
 80010f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010f4:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k = 0; k < n_buffer_length; k++)
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001104:	e025      	b.n	8001152 <maxim_heart_rate_and_oxygen_saturation+0x11a>
    {
        an_x[k] = pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8001106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001110:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	4413      	add	r3, r2
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4ab7      	ldr	r2, [pc, #732]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001124:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001128:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800112c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001130:	3301      	adds	r3, #1
 8001132:	4ab2      	ldr	r2, [pc, #712]	@ (80013fc <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001134:	fba2 1203 	umull	r1, r2, r2, r3
 8001138:	0992      	lsrs	r2, r2, #6
 800113a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800113e:	fb01 f202 	mul.w	r2, r1, r2
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k = 0; k < n_buffer_length; k++)
 8001148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800114c:	3301      	adds	r3, #1
 800114e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001152:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001156:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800115a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbd0      	blt.n	8001106 <maxim_heart_rate_and_oxygen_saturation+0xce>
    }
    
    // 4 pt Moving Average
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800116a:	e02c      	b.n	80011c6 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom = (an_x[k] + an_x[k+1] + an_x[k+2] + an_x[k+3]);
 800116c:	4aa4      	ldr	r2, [pc, #656]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800116e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001172:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001176:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800117a:	3301      	adds	r3, #1
 800117c:	49a0      	ldr	r1, [pc, #640]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800117e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001182:	441a      	add	r2, r3
 8001184:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001188:	3302      	adds	r3, #2
 800118a:	499d      	ldr	r1, [pc, #628]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800118c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001190:	441a      	add	r2, r3
 8001192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001196:	3303      	adds	r3, #3
 8001198:	4999      	ldr	r1, [pc, #612]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800119a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800119e:	4413      	add	r3, r2
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        an_x[k] = n_denom / (int32_t)4;
 80011a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da00      	bge.n	80011ae <maxim_heart_rate_and_oxygen_saturation+0x176>
 80011ac:	3303      	adds	r3, #3
 80011ae:	109b      	asrs	r3, r3, #2
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a93      	ldr	r2, [pc, #588]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80011b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
 80011bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80011c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011ca:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 80011ce:	dbcd      	blt.n	800116c <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // Get difference of smoothed IR signal
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80011d6:	e015      	b.n	8001204 <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k] = (an_x[k+1] - an_x[k]);
 80011d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011dc:	3301      	adds	r3, #1
 80011de:	4a88      	ldr	r2, [pc, #544]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80011e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e4:	4986      	ldr	r1, [pc, #536]	@ (8001400 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80011e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	4984      	ldr	r1, [pc, #528]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80011f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
 80011fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001204:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001208:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 800120c:	dde4      	ble.n	80011d8 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++){
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001214:	e019      	b.n	800124a <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] = (an_dx[k] + an_dx[k+1]) / 2;
 8001216:	4a7b      	ldr	r2, [pc, #492]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001218:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800121c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001220:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001224:	3301      	adds	r3, #1
 8001226:	4977      	ldr	r1, [pc, #476]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800122c:	4413      	add	r3, r2
 800122e:	0fda      	lsrs	r2, r3, #31
 8001230:	4413      	add	r3, r2
 8001232:	105b      	asrs	r3, r3, #1
 8001234:	4619      	mov	r1, r3
 8001236:	4a73      	ldr	r2, [pc, #460]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001238:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800123c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++){
 8001240:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800124a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800124e:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8001252:	dbe0      	blt.n	8001216 <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }
    
    // Hamming window
    // Flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++){
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800125a:	e039      	b.n	80012d0 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for(k = i; k < i + HAMMING_SIZE; k++){
 8001262:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001266:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800126a:	e018      	b.n	800129e <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] * auw_hamm[k-i];
 800126c:	4a65      	ldr	r2, [pc, #404]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800126e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800127a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800127e:	1a8a      	subs	r2, r1, r2
 8001280:	4961      	ldr	r1, [pc, #388]	@ (8001408 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8001282:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for(k = i; k < i + HAMMING_SIZE; k++){
 8001294:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001298:	3301      	adds	r3, #1
 800129a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800129e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012a2:	3304      	adds	r3, #4
 80012a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dddf      	ble.n	800126c <maxim_heart_rate_and_oxygen_saturation+0x234>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
 80012ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012b0:	4a56      	ldr	r2, [pc, #344]	@ (800140c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 80012b2:	fb82 1203 	smull	r1, r2, r2, r3
 80012b6:	1252      	asrs	r2, r2, #9
 80012b8:	17db      	asrs	r3, r3, #31
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	4951      	ldr	r1, [pc, #324]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80012be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++){
 80012c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012ca:	3301      	adds	r3, #1
 80012cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012d4:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 80012d8:	ddc0      	ble.n	800125c <maxim_heart_rate_and_oxygen_saturation+0x224>
    }

    n_th1 = 0; // threshold calculation
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80012e6:	e011      	b.n	800130c <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
 80012e8:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80012ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bfb8      	it	lt
 80012f6:	425b      	neglt	r3, r3
 80012f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012fc:	4413      	add	r3, r2
 80012fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++){
 8001302:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001306:	3301      	adds	r3, #1
 8001308:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800130c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001310:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8001314:	dde8      	ble.n	80012e8 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
 8001316:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800131a:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 800131c:	fb82 1203 	smull	r1, r2, r2, r3
 8001320:	1192      	asrs	r2, r2, #6
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    // Peak location is actually index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5);
 800132a:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800132e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001332:	2305      	movs	r3, #5
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2308      	movs	r3, #8
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f240 13ef 	movw	r3, #495	@ 0x1ef
 8001344:	4a2f      	ldr	r2, [pc, #188]	@ (8001404 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001346:	f000 fb91 	bl	8001a6c <maxim_find_peaks>

    n_peak_interval_sum = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    if (n_npks >= 2){
 8001350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001354:	2b01      	cmp	r3, #1
 8001356:	dd44      	ble.n	80013e2 <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k = 1; k < n_npks; k++)
 8001358:	2301      	movs	r3, #1
 800135a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800135e:	e01b      	b.n	8001398 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k-1]);
 8001360:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001364:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001368:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800136c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001374:	1e59      	subs	r1, r3, #1
 8001376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800137a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800137e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001388:	4413      	add	r3, r2
 800138a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (k = 1; k < n_npks; k++)
 800138e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800139c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbdd      	blt.n	8001360 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
 80013a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013a8:	3b01      	subs	r3, #1
 80013aa:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80013ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        *pn_heart_rate = (int32_t)(6000 / (float)n_peak_interval_sum * (float)(FS/100.0));
 80013b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001414 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 80013c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 2a90 	vmov	r2, s15
 80013d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80013d6:	601a      	str	r2, [r3, #0]
        *pch_hr_valid = 1;
 80013d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else {
        *pn_heart_rate = -999;
 80013e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80013e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 80013e8:	601a      	str	r2, [r3, #0]
        *pch_hr_valid = 0;
 80013ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    }
            
    for (k = 0; k < n_npks; k++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80013f8:	e026      	b.n	8001448 <maxim_heart_rate_and_oxygen_saturation+0x410>
 80013fa:	bf00      	nop
 80013fc:	1b4e81b5 	.word	0x1b4e81b5
 8001400:	20001b28 	.word	0x20001b28
 8001404:	20001368 	.word	0x20001368
 8001408:	080066f0 	.word	0x080066f0
 800140c:	725f9bed 	.word	0x725f9bed
 8001410:	21195767 	.word	0x21195767
 8001414:	45bb8000 	.word	0x45bb8000
 8001418:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
 800141c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001420:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001424:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	1c9a      	adds	r2, r3, #2
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001438:	443b      	add	r3, r7
 800143a:	f843 2c9c 	str.w	r2, [r3, #-156]
    for (k = 0; k < n_npks; k++)
 800143e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001442:	3301      	adds	r3, #1
 8001444:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800144c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001450:	429a      	cmp	r2, r3
 8001452:	dbe3      	blt.n	800141c <maxim_heart_rate_and_oxygen_saturation+0x3e4>

    // Raw value: RED(=y) and IR(=X)
    // We need to assess DC and AC value of IR and red PPG.
    un_offset_tmp = un_offset;
 8001454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001458:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k = 0; k < n_buffer_length; k++) {
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001468:	e032      	b.n	80014d0 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] = pun_ir_buffer[un_offset_tmp];
 800146a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001474:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	4413      	add	r3, r2
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	4ab3      	ldr	r2, [pc, #716]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001482:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] = pun_red_buffer[un_offset_tmp];
 800148a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001494:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4aac      	ldr	r2, [pc, #688]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80014a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80014aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80014ae:	3301      	adds	r3, #1
 80014b0:	4aa9      	ldr	r2, [pc, #676]	@ (8001758 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 80014b2:	fba2 1203 	umull	r1, r2, r2, r3
 80014b6:	0992      	lsrs	r2, r2, #6
 80014b8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80014bc:	fb01 f202 	mul.w	r2, r1, r2
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k = 0; k < n_buffer_length; k++) {
 80014c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80014d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbc3      	blt.n	800146a <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // Find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k = 0; k < n_npks; k++){
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80014ee:	e05a      	b.n	80015a6 <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        m = an_ir_valley_locs[k];
 80014f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001500:	443b      	add	r3, r7
 8001502:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        n_c_min = 16777216; // 2^24;
 800150a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800150e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0){
 8001512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001516:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 800151a:	da3f      	bge.n	800159c <maxim_heart_rate_and_oxygen_saturation+0x564>
 800151c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001520:	2b05      	cmp	r3, #5
 8001522:	dd3b      	ble.n	800159c <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i = m - 5; i < m + 5; i++)
 8001524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001528:	3b05      	subs	r3, #5
 800152a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800152e:	e025      	b.n	800157c <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i] < n_c_min){
 8001530:	4a87      	ldr	r2, [pc, #540]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001532:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800153e:	429a      	cmp	r2, r3
 8001540:	dd17      	ble.n	8001572 <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once > 0){
 8001542:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                    }
                    n_c_min = an_x[i];
 8001550:	4a7f      	ldr	r2, [pc, #508]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001552:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    an_exact_ir_valley_locs[k] = i;
 800155e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001568:	443b      	add	r3, r7
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800156e:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i = m - 5; i < m + 5; i++)
 8001572:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800157c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001580:	3304      	adds	r3, #4
 8001582:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001586:	429a      	cmp	r2, r3
 8001588:	ddd2      	ble.n	8001530 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once == 0)
 800158a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800158e:	2b00      	cmp	r3, #0
 8001590:	d104      	bne.n	800159c <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count++;
 8001592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001596:	3301      	adds	r3, #1
 8001598:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k = 0; k < n_npks; k++){
 800159c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015a0:	3301      	adds	r3, #1
 80015a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80015aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015ae:	429a      	cmp	r2, r3
 80015b0:	db9e      	blt.n	80014f0 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }

    if (n_exact_ir_valley_locs_count < 2)
 80015b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	dc08      	bgt.n	80015cc <maxim_heart_rate_and_oxygen_saturation+0x594>
    {
       *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
 80015ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80015be:	4a67      	ldr	r2, [pc, #412]	@ (800175c <maxim_heart_rate_and_oxygen_saturation+0x724>)
 80015c0:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid = 0;
 80015c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
       return;
 80015ca:	e243      	b.n	8001a54 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }

    // 4 pt MA
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE; k++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015d2:	e04c      	b.n	800166e <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k] = (an_x[k] + an_x[k+1] + an_x[k+2] + an_x[k+3]) / (int32_t)4;
 80015d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80015d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015e2:	3301      	adds	r3, #1
 80015e4:	495a      	ldr	r1, [pc, #360]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80015e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ea:	441a      	add	r2, r3
 80015ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015f0:	3302      	adds	r3, #2
 80015f2:	4957      	ldr	r1, [pc, #348]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80015f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015f8:	441a      	add	r2, r3
 80015fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015fe:	3303      	adds	r3, #3
 8001600:	4953      	ldr	r1, [pc, #332]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001602:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001606:	4413      	add	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 800160c:	3303      	adds	r3, #3
 800160e:	109b      	asrs	r3, r3, #2
 8001610:	4619      	mov	r1, r3
 8001612:	4a4f      	ldr	r2, [pc, #316]	@ (8001750 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001618:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] = (an_y[k] + an_y[k+1] + an_y[k+2] + an_y[k+3]) / (int32_t)4;
 800161c:	4a4d      	ldr	r2, [pc, #308]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800161e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001626:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800162a:	3301      	adds	r3, #1
 800162c:	4949      	ldr	r1, [pc, #292]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800162e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001632:	441a      	add	r2, r3
 8001634:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001638:	3302      	adds	r3, #2
 800163a:	4946      	ldr	r1, [pc, #280]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800163c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001640:	441a      	add	r2, r3
 8001642:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001646:	3303      	adds	r3, #3
 8001648:	4942      	ldr	r1, [pc, #264]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800164a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800164e:	4413      	add	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <maxim_heart_rate_and_oxygen_saturation+0x61e>
 8001654:	3303      	adds	r3, #3
 8001656:	109b      	asrs	r3, r3, #2
 8001658:	4619      	mov	r1, r3
 800165a:	4a3e      	ldr	r2, [pc, #248]	@ (8001754 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800165c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k = 0; k < BUFFER_SIZE - MA4_SIZE; k++){
 8001664:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001668:	3301      	adds	r3, #1
 800166a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800166e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001672:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8001676:	dbad      	blt.n	80015d4 <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    // Using an_exact_ir_valley_locs, find IR-red DC and IR-red AC for SPO2 calibration ratio
    // Finding AC/DC maximum of raw IR * red between two valley locations
    n_ratio_average = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    n_i_ratio_count = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    
    for(k = 0; k < 5; k++) an_ratio[k] = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800168a:	e00d      	b.n	80016a8 <maxim_heart_rate_and_oxygen_saturation+0x670>
 800168c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001690:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001694:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001698:	2100      	movs	r1, #0
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800169e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016a2:	3301      	adds	r3, #1
 80016a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	dded      	ble.n	800168c <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++){
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016b6:	e018      	b.n	80016ea <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE){
 80016b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80016c2:	443b      	add	r3, r7
 80016c4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80016c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016cc:	dd08      	ble.n	80016e0 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 = -999; // do not use SPO2 since valley loc is out of range
 80016ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80016d2:	4a22      	ldr	r2, [pc, #136]	@ (800175c <maxim_heart_rate_and_oxygen_saturation+0x724>)
 80016d4:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid = 0;
 80016d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
            return;
 80016de:	e1b9      	b.n	8001a54 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++){
 80016e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016ea:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbe0      	blt.n	80016b8 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }

    // Find max between two valley locations
    // and use ratio between AC component of IR & Red and DC component of IR & Red for SPO2
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016fc:	e14d      	b.n	800199a <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max = -16777216;
 80016fe:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001702:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        n_x_dc_max = -16777216;
 8001706:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800170a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        if (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k] > 10){
 800170e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001712:	3301      	adds	r3, #1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800171a:	443b      	add	r3, r7
 800171c:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001720:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800172a:	443b      	add	r3, r7
 800172c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b0a      	cmp	r3, #10
 8001734:	f340 812c 	ble.w	8001990 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k+1]; i++){
 8001738:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001742:	443b      	add	r3, r7
 8001744:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001748:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800174c:	e035      	b.n	80017ba <maxim_heart_rate_and_oxygen_saturation+0x782>
 800174e:	bf00      	nop
 8001750:	20001b28 	.word	0x20001b28
 8001754:	200022f8 	.word	0x200022f8
 8001758:	1b4e81b5 	.word	0x1b4e81b5
 800175c:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max) {n_x_dc_max = an_x[i]; n_x_dc_max_idx = i;}
 8001760:	4abe      	ldr	r2, [pc, #760]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001762:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800176e:	429a      	cmp	r2, r3
 8001770:	da0a      	bge.n	8001788 <maxim_heart_rate_and_oxygen_saturation+0x750>
 8001772:	4aba      	ldr	r2, [pc, #744]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001774:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001780:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001784:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                if (an_y[i] > n_y_dc_max) {n_y_dc_max = an_y[i]; n_y_dc_max_idx = i;}
 8001788:	4ab5      	ldr	r2, [pc, #724]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800178a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001796:	429a      	cmp	r2, r3
 8001798:	da0a      	bge.n	80017b0 <maxim_heart_rate_and_oxygen_saturation+0x778>
 800179a:	4ab1      	ldr	r2, [pc, #708]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800179c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80017a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k+1]; i++){
 80017b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017be:	3301      	adds	r3, #1
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80017c6:	443b      	add	r3, r7
 80017c8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbc5      	blt.n	8001760 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac = (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); // red
 80017d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017d8:	3301      	adds	r3, #1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80017e0:	443b      	add	r3, r7
 80017e2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017e6:	4a9e      	ldr	r2, [pc, #632]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80017e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80017f6:	443b      	add	r3, r7
 80017f8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fc:	4998      	ldr	r1, [pc, #608]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80017fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800180e:	443b      	add	r3, r7
 8001810:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001814:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001818:	1acb      	subs	r3, r1, r3
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8001822:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800182c:	443b      	add	r3, r7
 800182e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001832:	4a8b      	ldr	r2, [pc, #556]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001838:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800183c:	3301      	adds	r3, #1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001844:	443b      	add	r3, r7
 8001846:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800184a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001854:	443b      	add	r3, r7
 8001856:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800185a:	1acb      	subs	r3, r1, r3
 800185c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8001860:	fb91 f3f3 	sdiv	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac; // subtracting linear DC components from raw
 800186a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a60 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001874:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            n_x_ac = (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
 800187e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001882:	3301      	adds	r3, #1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800188a:	443b      	add	r3, r7
 800188c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001890:	4a72      	ldr	r2, [pc, #456]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80018a0:	443b      	add	r3, r7
 80018a2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80018a6:	496d      	ldr	r1, [pc, #436]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80018a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80018b8:	443b      	add	r3, r7
 80018ba:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80018be:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80018c2:	1acb      	subs	r3, r1, r3
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 80018cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80018d6:	443b      	add	r3, r7
 80018d8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80018dc:	4a5f      	ldr	r2, [pc, #380]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80018de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018e6:	3301      	adds	r3, #1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80018ee:	443b      	add	r3, r7
 80018f0:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80018f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80018fe:	443b      	add	r3, r7
 8001900:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001904:	1acb      	subs	r3, r1, r3
 8001906:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800190a:	fb91 f3f3 	sdiv	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subtracting linear DC components from raw
 8001914:	4a51      	ldr	r2, [pc, #324]	@ (8001a5c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800191a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800191e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

            n_nume = (n_y_ac * n_x_dc_max) >> 7; // prepare X100 to preserve floating value
 8001928:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800192c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	11db      	asrs	r3, r3, #7
 8001936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
 800193a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800193e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	11db      	asrs	r3, r3, #7
 8001948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
 800194c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001950:	2b00      	cmp	r3, #0
 8001952:	dd1d      	ble.n	8001990 <maxim_heart_rate_and_oxygen_saturation+0x958>
 8001954:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001958:	2b04      	cmp	r3, #4
 800195a:	dc19      	bgt.n	8001990 <maxim_heart_rate_and_oxygen_saturation+0x958>
 800195c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {   
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; // formula is (n_y_ac * n_x_dc_max) / (n_x_ac * n_y_dc_max);
 8001964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001968:	2264      	movs	r2, #100	@ 0x64
 800196a:	fb03 f202 	mul.w	r2, r3, r2
 800196e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001972:	fb92 f1f3 	sdiv	r1, r2, r3
 8001976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800197a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800197e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8001986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800198a:	3301      	adds	r3, #1
 800198c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++){
 8001990:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001994:	3301      	adds	r3, #1
 8001996:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800199a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800199e:	3b01      	subs	r3, #1
 80019a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f6ff aeaa 	blt.w	80016fe <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f94f 	bl	8001c56 <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
 80019b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019bc:	0fda      	lsrs	r2, r3, #31
 80019be:	4413      	add	r3, r2
 80019c0:	105b      	asrs	r3, r3, #1
 80019c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    if (n_middle_idx > 1)
 80019c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	dd17      	ble.n	80019fe <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average = (an_ratio[n_middle_idx-1] + an_ratio[n_middle_idx]) / 2; // use median
 80019ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019e8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80019ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019f0:	4413      	add	r3, r2
 80019f2:	0fda      	lsrs	r2, r3, #31
 80019f4:	4413      	add	r3, r2
 80019f6:	105b      	asrs	r3, r3, #1
 80019f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80019fc:	e009      	b.n	8001a12 <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx];
 80019fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a06:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    if(n_ratio_average > 2 && n_ratio_average < 184){
 8001a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	dd14      	ble.n	8001a44 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 8001a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a1e:	2bb7      	cmp	r3, #183	@ 0xb7
 8001a20:	dc10      	bgt.n	8001a44 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc = uch_spo2_table[n_ratio_average];
 8001a22:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 8001a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        *pn_spo2 = n_spo2_calc;
 8001a30:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001a34:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001a38:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid = 1;
 8001a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e007      	b.n	8001a54 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
 8001a44:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001a48:	4a07      	ldr	r2, [pc, #28]	@ (8001a68 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 8001a4a:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid = 0;
 8001a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
    }
}
 8001a54:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	20001b28 	.word	0x20001b28
 8001a60:	200022f8 	.word	0x200022f8
 8001a64:	08006730 	.word	0x08006730
 8001a68:	fffffc19 	.word	0xfffffc19

08001a6c <maxim_find_peaks>:

/**
 * @brief Find peaks
 */
void maxim_find_peaks(int32_t *pn_locs, int32_t *pn_npks, int32_t *pn_x, int32_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f812 	bl	8001aae <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f880 	bl	8001b96 <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	bfa8      	it	ge
 8001aa0:	461a      	movge	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <maxim_peaks_above_min_height>:

/**
 * @brief Find peaks above minimum height
 */
void maxim_peaks_above_min_height(int32_t *pn_locs, int32_t *pn_npks, int32_t *pn_x, int32_t n_size, int32_t n_min_height)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    
    while (i < n_size - 1){
 8001ac6:	e05a      	b.n	8001b7e <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){ // find left edge of potential peaks
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	da4f      	bge.n	8001b78 <maxim_peaks_above_min_height+0xca>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	440b      	add	r3, r1
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dd40      	ble.n	8001b78 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
 8001afa:	e002      	b.n	8001b02 <maxim_peaks_above_min_height+0x54>
                n_width++;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3301      	adds	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dd0d      	ble.n	8001b2a <maxim_peaks_above_min_height+0x7c>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	440b      	add	r3, r1
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d0e8      	beq.n	8001afc <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15){ // find right edge of peaks
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6979      	ldr	r1, [r7, #20]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	440b      	add	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	440b      	add	r3, r1
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dd13      	ble.n	8001b6e <maxim_peaks_above_min_height+0xc0>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b0e      	cmp	r3, #14
 8001b4c:	dc0f      	bgt.n	8001b6e <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1c59      	adds	r1, r3, #1
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	6011      	str	r1, [r2, #0]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width + 1;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3301      	adds	r3, #1
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15){ // find right edge of peaks
 8001b6c:	e007      	b.n	8001b7e <maxim_peaks_above_min_height+0xd0>
            }
            else
                i += n_width;
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15){ // find right edge of peaks
 8001b76:	e002      	b.n	8001b7e <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
    while (i < n_size - 1){
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	db9f      	blt.n	8001ac8 <maxim_peaks_above_min_height+0x1a>
    }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <maxim_remove_close_peaks>:

/**
 * @brief Remove close peaks
 */
void maxim_remove_close_peaks(int32_t *pn_locs, int32_t *pn_npks, int32_t *pn_x, int32_t n_min_distance)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b088      	sub	sp, #32
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f895 	bl	8001cdc <maxim_sort_indices_descend>

    for (i = -1; i < *pn_npks; i++){
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	e03e      	b.n	8001c38 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	617b      	str	r3, [r7, #20]
        *pn_npks = i + 1;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	601a      	str	r2, [r3, #0]
        for (j = i + 1; j < n_old_npks; j++){
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	e02c      	b.n	8001c2a <maxim_remove_close_peaks+0x94>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <maxim_remove_close_peaks+0x58>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	440b      	add	r3, r1
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e001      	b.n	8001bf2 <maxim_remove_close_peaks+0x5c>
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	613b      	str	r3, [r7, #16]
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dc04      	bgt.n	8001c08 <maxim_remove_close_peaks+0x72>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	425b      	negs	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	da0d      	bge.n	8001c24 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	441a      	add	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1c58      	adds	r0, r3, #1
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	6008      	str	r0, [r1, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	440b      	add	r3, r1
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	601a      	str	r2, [r3, #0]
        for (j = i + 1; j < n_old_npks; j++){
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbce      	blt.n	8001bd0 <maxim_remove_close_peaks+0x3a>
    for (i = -1; i < *pn_npks; i++){
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbbb      	blt.n	8001bba <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices into ascending order
    maxim_sort_ascend(pn_locs, *pn_npks);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f804 	bl	8001c56 <maxim_sort_ascend>
}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <maxim_sort_ascend>:

/**
 * @brief Sort array in ascending order
 */
void maxim_sort_ascend(int32_t *pn_x, int32_t n_size)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e02f      	b.n	8001cc6 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00f      	b.n	8001c98 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	441a      	add	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	440b      	add	r3, r1
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dd0a      	ble.n	8001cb4 <maxim_sort_ascend+0x5e>
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbe1      	blt.n	8001c78 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbcb      	blt.n	8001c66 <maxim_sort_ascend+0x10>
    }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <maxim_sort_indices_descend>:

/**
 * @brief Sort indices according to descending order
 */
void maxim_sort_indices_descend(int32_t *pn_x, int32_t *pn_indx, int32_t n_size)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e037      	b.n	8001d5e <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	e00f      	b.n	8001d20 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d06:	3b01      	subs	r3, #1
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	440b      	add	r3, r1
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd12      	ble.n	8001d4c <maxim_sort_indices_descend+0x70>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d36:	3b01      	subs	r3, #1
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	440b      	add	r3, r1
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dcd9      	bgt.n	8001d00 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	4413      	add	r3, r2
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbc3      	blt.n	8001cee <maxim_sort_indices_descend+0x12>
    }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	3724      	adds	r7, #36	@ 0x24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Printf redirection to UART
int __io_putchar(int ch)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d7c:	1d39      	adds	r1, r7, #4
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	2201      	movs	r2, #1
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <__io_putchar+0x20>)
 8001d86:	f002 ff13 	bl	8004bb0 <HAL_UART_Transmit>
    return ch;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20002b1c 	.word	0x20002b1c

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b098      	sub	sp, #96	@ 0x60
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9e:	f000 fd55 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da2:	f000 fa47 	bl	8002234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da6:	f000 fb09 	bl	80023bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001daa:	f000 faaf 	bl	800230c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001dae:	f000 fadb 	bl	8002368 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  // Wait for system to stabilize
  HAL_Delay(1000);
 8001db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db6:	f000 fdbb 	bl	8002930 <HAL_Delay>

  printf("\r\n");
 8001dba:	48b9      	ldr	r0, [pc, #740]	@ (80020a0 <main+0x308>)
 8001dbc:	f003 fbde 	bl	800557c <puts>
  printf("===========================================\r\n");
 8001dc0:	48b8      	ldr	r0, [pc, #736]	@ (80020a4 <main+0x30c>)
 8001dc2:	f003 fbdb 	bl	800557c <puts>
  printf("     MAX30102 Heart Rate & SpO2 Monitor   \r\n");
 8001dc6:	48b8      	ldr	r0, [pc, #736]	@ (80020a8 <main+0x310>)
 8001dc8:	f003 fbd8 	bl	800557c <puts>
  printf("              Version 1.0                 \r\n");
 8001dcc:	48b7      	ldr	r0, [pc, #732]	@ (80020ac <main+0x314>)
 8001dce:	f003 fbd5 	bl	800557c <puts>
  printf("===========================================\r\n");
 8001dd2:	48b4      	ldr	r0, [pc, #720]	@ (80020a4 <main+0x30c>)
 8001dd4:	f003 fbd2 	bl	800557c <puts>
  printf("Initializing system...\r\n\r\n");
 8001dd8:	48b5      	ldr	r0, [pc, #724]	@ (80020b0 <main+0x318>)
 8001dda:	f003 fbcf 	bl	800557c <puts>

  // Initialize MAX30102
  printf("Connecting to MAX30102 sensor...\r\n");
 8001dde:	48b5      	ldr	r0, [pc, #724]	@ (80020b4 <main+0x31c>)
 8001de0:	f003 fbcc 	bl	800557c <puts>
  if (HAL_I2C_IsDeviceReady(&hi2c1, MAX30102_ADDRESS, 3, 1000) != HAL_OK) {
 8001de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de8:	2203      	movs	r2, #3
 8001dea:	21ae      	movs	r1, #174	@ 0xae
 8001dec:	48b2      	ldr	r0, [pc, #712]	@ (80020b8 <main+0x320>)
 8001dee:	f001 fd15 	bl	800381c <HAL_I2C_IsDeviceReady>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <main+0x7e>
    printf("ERROR: MAX30102 not found!\r\n");
 8001df8:	48b0      	ldr	r0, [pc, #704]	@ (80020bc <main+0x324>)
 8001dfa:	f003 fbbf 	bl	800557c <puts>
    printf("Please check your connections and restart.\r\n");
 8001dfe:	48b0      	ldr	r0, [pc, #704]	@ (80020c0 <main+0x328>)
 8001e00:	f003 fbbc 	bl	800557c <puts>
    while(1) {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e04:	2120      	movs	r1, #32
 8001e06:	48af      	ldr	r0, [pc, #700]	@ (80020c4 <main+0x32c>)
 8001e08:	f001 f865 	bl	8002ed6 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8001e0c:	20c8      	movs	r0, #200	@ 0xc8
 8001e0e:	f000 fd8f 	bl	8002930 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e12:	bf00      	nop
 8001e14:	e7f6      	b.n	8001e04 <main+0x6c>
    }
  }

  printf("MAX30102 sensor connected successfully!\r\n");
 8001e16:	48ac      	ldr	r0, [pc, #688]	@ (80020c8 <main+0x330>)
 8001e18:	f003 fbb0 	bl	800557c <puts>

  if (Max30102_Init(&hi2c1) != MAX30102_OK) {
 8001e1c:	48a6      	ldr	r0, [pc, #664]	@ (80020b8 <main+0x320>)
 8001e1e:	f7ff f857 	bl	8000ed0 <Max30102_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d00b      	beq.n	8001e40 <main+0xa8>
    printf("ERROR: Sensor initialization failed!\r\n");
 8001e28:	48a8      	ldr	r0, [pc, #672]	@ (80020cc <main+0x334>)
 8001e2a:	f003 fba7 	bl	800557c <puts>
    while(1) {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e2e:	2120      	movs	r1, #32
 8001e30:	48a4      	ldr	r0, [pc, #656]	@ (80020c4 <main+0x32c>)
 8001e32:	f001 f850 	bl	8002ed6 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f000 fd7a 	bl	8002930 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e3c:	bf00      	nop
 8001e3e:	e7f6      	b.n	8001e2e <main+0x96>
    }
  }

  printf("Sensor initialized and ready!\r\n\r\n");
 8001e40:	48a3      	ldr	r0, [pc, #652]	@ (80020d0 <main+0x338>)
 8001e42:	f003 fb9b 	bl	800557c <puts>

  printf("Instructions:\r\n");
 8001e46:	48a3      	ldr	r0, [pc, #652]	@ (80020d4 <main+0x33c>)
 8001e48:	f003 fb98 	bl	800557c <puts>
  printf("   - Place your finger gently on the sensor\r\n");
 8001e4c:	48a2      	ldr	r0, [pc, #648]	@ (80020d8 <main+0x340>)
 8001e4e:	f003 fb95 	bl	800557c <puts>
  printf("   - Cover both RED and IR LEDs completely\r\n");
 8001e52:	48a2      	ldr	r0, [pc, #648]	@ (80020dc <main+0x344>)
 8001e54:	f003 fb92 	bl	800557c <puts>
  printf("   - Keep your finger still during measurement\r\n");
 8001e58:	48a1      	ldr	r0, [pc, #644]	@ (80020e0 <main+0x348>)
 8001e5a:	f003 fb8f 	bl	800557c <puts>
  printf("   - Wait 10-15 seconds for stable readings\r\n\r\n");
 8001e5e:	48a1      	ldr	r0, [pc, #644]	@ (80020e4 <main+0x34c>)
 8001e60:	f003 fb8c 	bl	800557c <puts>

  printf("Measurement Display Format:\r\n");
 8001e64:	48a0      	ldr	r0, [pc, #640]	@ (80020e8 <main+0x350>)
 8001e66:	f003 fb89 	bl	800557c <puts>
  printf("   [MM:SS] Heart Rate: XXX bpm | SpO2: XX%% | Finger: YES/NO\r\n");
 8001e6a:	48a0      	ldr	r0, [pc, #640]	@ (80020ec <main+0x354>)
 8001e6c:	f003 fb1e 	bl	80054ac <iprintf>

  printf("\r\n===========================================\r\n");
 8001e70:	489f      	ldr	r0, [pc, #636]	@ (80020f0 <main+0x358>)
 8001e72:	f003 fb83 	bl	800557c <puts>
  printf("Starting continuous monitoring...\r\n\r\n");
 8001e76:	489f      	ldr	r0, [pc, #636]	@ (80020f4 <main+0x35c>)
 8001e78:	f003 fb80 	bl	800557c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_measurement_time = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t led_toggle_time = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t startup_time = HAL_GetTick();
 8001e84:	f000 fd48 	bl	8002918 <HAL_GetTick>
 8001e88:	63b8      	str	r0, [r7, #56]	@ 0x38
  uint8_t measurement_count = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  uint8_t last_finger_state = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  int32_t hr_history[5] = {0};  // Store last 5 HR readings for averaging
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
  int32_t spo2_history[5] = {0}; // Store last 5 SpO2 readings for averaging
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  uint8_t history_index = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Run MAX30102 state machine
    Max30102_Task();
 8001eba:	f7fe ff53 	bl	8000d64 <Max30102_Task>

    // Display measurements every 2 seconds
    if (HAL_GetTick() - last_measurement_time >= 2000) {
 8001ebe:	f000 fd2b 	bl	8002918 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ecc:	f0c0 817f 	bcc.w	80021ce <main+0x436>
        last_measurement_time = HAL_GetTick();
 8001ed0:	f000 fd22 	bl	8002918 <HAL_GetTick>
 8001ed4:	65f8      	str	r0, [r7, #92]	@ 0x5c

        int32_t heart_rate = Max30102_GetHeartRate();
 8001ed6:	f7fe ff2d 	bl	8000d34 <Max30102_GetHeartRate>
 8001eda:	6378      	str	r0, [r7, #52]	@ 0x34
        int32_t spo2 = Max30102_GetSpO2Value();
 8001edc:	f7fe ff36 	bl	8000d4c <Max30102_GetSpO2Value>
 8001ee0:	6338      	str	r0, [r7, #48]	@ 0x30
        uint8_t finger_detected = Max30102_IsFingerOnSensor();
 8001ee2:	f7fe ff1b 	bl	8000d1c <Max30102_IsFingerOnSensor>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // Print timestamp
        uint32_t seconds = (HAL_GetTick() - startup_time) / 1000;
 8001eec:	f000 fd14 	bl	8002918 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a80      	ldr	r2, [pc, #512]	@ (80020f8 <main+0x360>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
        printf("[%02lu:%02lu] ", seconds / 60, seconds % 60);
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	4a7e      	ldr	r2, [pc, #504]	@ (80020fc <main+0x364>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0958      	lsrs	r0, r3, #5
 8001f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80020fc <main+0x364>)
 8001f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f12:	095a      	lsrs	r2, r3, #5
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	1aca      	subs	r2, r1, r3
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4877      	ldr	r0, [pc, #476]	@ (8002100 <main+0x368>)
 8001f22:	f003 fac3 	bl	80054ac <iprintf>

        // Check for finger state changes
        if (finger_detected != last_finger_state) {
 8001f26:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001f2a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d02b      	beq.n	8001f8a <main+0x1f2>
            if (finger_detected) {
 8001f32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <main+0x1e4>
                printf("Finger detected! Starting measurement...\r\n");
 8001f3a:	4872      	ldr	r0, [pc, #456]	@ (8002104 <main+0x36c>)
 8001f3c:	f003 fb1e 	bl	800557c <puts>
                measurement_count = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                // Clear history when finger is newly detected
                for(int i = 0; i < 5; i++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f4a:	e010      	b.n	8001f6e <main+0x1d6>
                    hr_history[i] = 0;
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3360      	adds	r3, #96	@ 0x60
 8001f52:	443b      	add	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	f843 2c4c 	str.w	r2, [r3, #-76]
                    spo2_history[i] = 0;
 8001f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	3360      	adds	r3, #96	@ 0x60
 8001f60:	443b      	add	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	f843 2c60 	str.w	r2, [r3, #-96]
                for(int i = 0; i < 5; i++) {
 8001f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	ddeb      	ble.n	8001f4c <main+0x1b4>
                }
                history_index = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001f7a:	e002      	b.n	8001f82 <main+0x1ea>
            } else {
                printf("Finger removed. Place finger to continue...\r\n");
 8001f7c:	4862      	ldr	r0, [pc, #392]	@ (8002108 <main+0x370>)
 8001f7e:	f003 fafd 	bl	800557c <puts>
            }
            last_finger_state = finger_detected;
 8001f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f86:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        }

        if (finger_detected) {
 8001f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8114 	beq.w	80021bc <main+0x424>
            // Store valid readings in history for averaging
            if (heart_rate > 40 && heart_rate < 200) {
 8001f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f96:	2b28      	cmp	r3, #40	@ 0x28
 8001f98:	dd0a      	ble.n	8001fb0 <main+0x218>
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f9e:	dc07      	bgt.n	8001fb0 <main+0x218>
                hr_history[history_index] = heart_rate;
 8001fa0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	3360      	adds	r3, #96	@ 0x60
 8001fa8:	443b      	add	r3, r7
 8001faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fac:	f843 2c4c 	str.w	r2, [r3, #-76]
            }
            if (spo2 > 80 && spo2 <= 100) {
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	2b50      	cmp	r3, #80	@ 0x50
 8001fb4:	dd0a      	ble.n	8001fcc <main+0x234>
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	2b64      	cmp	r3, #100	@ 0x64
 8001fba:	dc07      	bgt.n	8001fcc <main+0x234>
                spo2_history[history_index] = spo2;
 8001fbc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3360      	adds	r3, #96	@ 0x60
 8001fc4:	443b      	add	r3, r7
 8001fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fc8:	f843 2c60 	str.w	r2, [r3, #-96]
            }
            history_index = (history_index + 1) % 5;
 8001fcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800210c <main+0x374>)
 8001fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd8:	1059      	asrs	r1, r3, #1
 8001fda:	17d3      	asrs	r3, r2, #31
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	460b      	mov	r3, r1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	1ad1      	subs	r1, r2, r3
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // Calculate averages for more stable readings
            int32_t hr_avg = 0, spo2_avg = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
            int hr_count = 0, spo2_count = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	@ 0x40

            for(int i = 0; i < 5; i++) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002000:	e02a      	b.n	8002058 <main+0x2c0>
                if(hr_history[i] > 0) {
 8002002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3360      	adds	r3, #96	@ 0x60
 8002008:	443b      	add	r3, r7
 800200a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800200e:	2b00      	cmp	r3, #0
 8002010:	dd0b      	ble.n	800202a <main+0x292>
                    hr_avg += hr_history[i];
 8002012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3360      	adds	r3, #96	@ 0x60
 8002018:	443b      	add	r3, r7
 800201a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800201e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002020:	4413      	add	r3, r2
 8002022:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    hr_count++;
 8002024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002026:	3301      	adds	r3, #1
 8002028:	647b      	str	r3, [r7, #68]	@ 0x44
                }
                if(spo2_history[i] > 0) {
 800202a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3360      	adds	r3, #96	@ 0x60
 8002030:	443b      	add	r3, r7
 8002032:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8002036:	2b00      	cmp	r3, #0
 8002038:	dd0b      	ble.n	8002052 <main+0x2ba>
                    spo2_avg += spo2_history[i];
 800203a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3360      	adds	r3, #96	@ 0x60
 8002040:	443b      	add	r3, r7
 8002042:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8002046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002048:	4413      	add	r3, r2
 800204a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    spo2_count++;
 800204c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800204e:	3301      	adds	r3, #1
 8002050:	643b      	str	r3, [r7, #64]	@ 0x40
            for(int i = 0; i < 5; i++) {
 8002052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002054:	3301      	adds	r3, #1
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205a:	2b04      	cmp	r3, #4
 800205c:	ddd1      	ble.n	8002002 <main+0x26a>
                }
            }

            printf("Heart Rate: ");
 800205e:	482c      	ldr	r0, [pc, #176]	@ (8002110 <main+0x378>)
 8002060:	f003 fa24 	bl	80054ac <iprintf>
            if (hr_count > 0) {
 8002064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002066:	2b00      	cmp	r3, #0
 8002068:	dd5c      	ble.n	8002124 <main+0x38c>
                hr_avg /= hr_count;
 800206a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800206c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
                printf("%3ld bpm", hr_avg);
 8002074:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002076:	4827      	ldr	r0, [pc, #156]	@ (8002114 <main+0x37c>)
 8002078:	f003 fa18 	bl	80054ac <iprintf>

                // Add heart rate status indicator
                if (hr_avg < 60) printf(" (Low)");
 800207c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002080:	dc03      	bgt.n	800208a <main+0x2f2>
 8002082:	4825      	ldr	r0, [pc, #148]	@ (8002118 <main+0x380>)
 8002084:	f003 fa12 	bl	80054ac <iprintf>
 8002088:	e04f      	b.n	800212a <main+0x392>
                else if (hr_avg > 100) printf(" (High)");
 800208a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800208c:	2b64      	cmp	r3, #100	@ 0x64
 800208e:	dd03      	ble.n	8002098 <main+0x300>
 8002090:	4822      	ldr	r0, [pc, #136]	@ (800211c <main+0x384>)
 8002092:	f003 fa0b 	bl	80054ac <iprintf>
 8002096:	e048      	b.n	800212a <main+0x392>
                else printf(" (Normal)");
 8002098:	4821      	ldr	r0, [pc, #132]	@ (8002120 <main+0x388>)
 800209a:	f003 fa07 	bl	80054ac <iprintf>
 800209e:	e044      	b.n	800212a <main+0x392>
 80020a0:	08006258 	.word	0x08006258
 80020a4:	0800625c 	.word	0x0800625c
 80020a8:	0800628c 	.word	0x0800628c
 80020ac:	080062b8 	.word	0x080062b8
 80020b0:	080062e4 	.word	0x080062e4
 80020b4:	08006300 	.word	0x08006300
 80020b8:	20002ac8 	.word	0x20002ac8
 80020bc:	08006324 	.word	0x08006324
 80020c0:	08006340 	.word	0x08006340
 80020c4:	40020000 	.word	0x40020000
 80020c8:	0800636c 	.word	0x0800636c
 80020cc:	08006398 	.word	0x08006398
 80020d0:	080063c0 	.word	0x080063c0
 80020d4:	080063e4 	.word	0x080063e4
 80020d8:	080063f4 	.word	0x080063f4
 80020dc:	08006424 	.word	0x08006424
 80020e0:	08006450 	.word	0x08006450
 80020e4:	08006480 	.word	0x08006480
 80020e8:	080064b0 	.word	0x080064b0
 80020ec:	080064d0 	.word	0x080064d0
 80020f0:	08006510 	.word	0x08006510
 80020f4:	08006540 	.word	0x08006540
 80020f8:	10624dd3 	.word	0x10624dd3
 80020fc:	88888889 	.word	0x88888889
 8002100:	08006568 	.word	0x08006568
 8002104:	08006578 	.word	0x08006578
 8002108:	080065a4 	.word	0x080065a4
 800210c:	66666667 	.word	0x66666667
 8002110:	080065d4 	.word	0x080065d4
 8002114:	080065e4 	.word	0x080065e4
 8002118:	080065f0 	.word	0x080065f0
 800211c:	080065f8 	.word	0x080065f8
 8002120:	08006600 	.word	0x08006600
            } else {
                printf("--- bpm");
 8002124:	4833      	ldr	r0, [pc, #204]	@ (80021f4 <main+0x45c>)
 8002126:	f003 f9c1 	bl	80054ac <iprintf>
            }

            printf(" | SpO2: ");
 800212a:	4833      	ldr	r0, [pc, #204]	@ (80021f8 <main+0x460>)
 800212c:	f003 f9be 	bl	80054ac <iprintf>
            if (spo2_count > 0) {
 8002130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	dd24      	ble.n	8002180 <main+0x3e8>
                spo2_avg /= spo2_count;
 8002136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213a:	fb92 f3f3 	sdiv	r3, r2, r3
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
                printf("%2ld", spo2_avg);
 8002140:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002142:	482e      	ldr	r0, [pc, #184]	@ (80021fc <main+0x464>)
 8002144:	f003 f9b2 	bl	80054ac <iprintf>
                printf("%%");
 8002148:	482d      	ldr	r0, [pc, #180]	@ (8002200 <main+0x468>)
 800214a:	f003 f9af 	bl	80054ac <iprintf>

                // Add SpO2 status indicator
                if (spo2_avg >= 98) printf(" (Excellent)");
 800214e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002150:	2b61      	cmp	r3, #97	@ 0x61
 8002152:	dd03      	ble.n	800215c <main+0x3c4>
 8002154:	482b      	ldr	r0, [pc, #172]	@ (8002204 <main+0x46c>)
 8002156:	f003 f9a9 	bl	80054ac <iprintf>
 800215a:	e017      	b.n	800218c <main+0x3f4>
                else if (spo2_avg >= 95) printf(" (Good)");
 800215c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800215e:	2b5e      	cmp	r3, #94	@ 0x5e
 8002160:	dd03      	ble.n	800216a <main+0x3d2>
 8002162:	4829      	ldr	r0, [pc, #164]	@ (8002208 <main+0x470>)
 8002164:	f003 f9a2 	bl	80054ac <iprintf>
 8002168:	e010      	b.n	800218c <main+0x3f4>
                else if (spo2_avg >= 90) printf(" (Fair)");
 800216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216c:	2b59      	cmp	r3, #89	@ 0x59
 800216e:	dd03      	ble.n	8002178 <main+0x3e0>
 8002170:	4826      	ldr	r0, [pc, #152]	@ (800220c <main+0x474>)
 8002172:	f003 f99b 	bl	80054ac <iprintf>
 8002176:	e009      	b.n	800218c <main+0x3f4>
                else printf(" (Low)");
 8002178:	4825      	ldr	r0, [pc, #148]	@ (8002210 <main+0x478>)
 800217a:	f003 f997 	bl	80054ac <iprintf>
 800217e:	e005      	b.n	800218c <main+0x3f4>
            } else {
                printf("--");
 8002180:	4824      	ldr	r0, [pc, #144]	@ (8002214 <main+0x47c>)
 8002182:	f003 f993 	bl	80054ac <iprintf>
                printf("%%");
 8002186:	481e      	ldr	r0, [pc, #120]	@ (8002200 <main+0x468>)
 8002188:	f003 f990 	bl	80054ac <iprintf>
            }

            printf(" | Finger: YES");
 800218c:	4822      	ldr	r0, [pc, #136]	@ (8002218 <main+0x480>)
 800218e:	f003 f98d 	bl	80054ac <iprintf>

            if (measurement_count < 5) {
 8002192:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002196:	2b04      	cmp	r3, #4
 8002198:	d80c      	bhi.n	80021b4 <main+0x41c>
                printf(" | Stabilizing (%d/5)", measurement_count + 1);
 800219a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800219e:	3301      	adds	r3, #1
 80021a0:	4619      	mov	r1, r3
 80021a2:	481e      	ldr	r0, [pc, #120]	@ (800221c <main+0x484>)
 80021a4:	f003 f982 	bl	80054ac <iprintf>
                measurement_count++;
 80021a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80021ac:	3301      	adds	r3, #1
 80021ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80021b2:	e009      	b.n	80021c8 <main+0x430>
            } else {
                printf(" | Stable");
 80021b4:	481a      	ldr	r0, [pc, #104]	@ (8002220 <main+0x488>)
 80021b6:	f003 f979 	bl	80054ac <iprintf>
 80021ba:	e005      	b.n	80021c8 <main+0x430>
            }

        } else {
            printf("Heart Rate: --- bpm | SpO2: --");
 80021bc:	4819      	ldr	r0, [pc, #100]	@ (8002224 <main+0x48c>)
 80021be:	f003 f975 	bl	80054ac <iprintf>
            printf("%% | Finger: NO | Place finger on sensor");
 80021c2:	4819      	ldr	r0, [pc, #100]	@ (8002228 <main+0x490>)
 80021c4:	f003 f972 	bl	80054ac <iprintf>
        }

        printf("\r\n");
 80021c8:	4818      	ldr	r0, [pc, #96]	@ (800222c <main+0x494>)
 80021ca:	f003 f9d7 	bl	800557c <puts>
    }

    // Toggle status LED every 1 second to show system is alive
    if (HAL_GetTick() - led_toggle_time >= 1000) {
 80021ce:	f000 fba3 	bl	8002918 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021dc:	d306      	bcc.n	80021ec <main+0x454>
        led_toggle_time = HAL_GetTick();
 80021de:	f000 fb9b 	bl	8002918 <HAL_GetTick>
 80021e2:	65b8      	str	r0, [r7, #88]	@ 0x58
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021e4:	2120      	movs	r1, #32
 80021e6:	4812      	ldr	r0, [pc, #72]	@ (8002230 <main+0x498>)
 80021e8:	f000 fe75 	bl	8002ed6 <HAL_GPIO_TogglePin>
    }

    // Small delay to prevent overwhelming the system
    HAL_Delay(10);
 80021ec:	200a      	movs	r0, #10
 80021ee:	f000 fb9f 	bl	8002930 <HAL_Delay>
    Max30102_Task();
 80021f2:	e662      	b.n	8001eba <main+0x122>
 80021f4:	0800660c 	.word	0x0800660c
 80021f8:	08006614 	.word	0x08006614
 80021fc:	08006620 	.word	0x08006620
 8002200:	08006628 	.word	0x08006628
 8002204:	0800662c 	.word	0x0800662c
 8002208:	0800663c 	.word	0x0800663c
 800220c:	08006644 	.word	0x08006644
 8002210:	080065f0 	.word	0x080065f0
 8002214:	0800664c 	.word	0x0800664c
 8002218:	08006650 	.word	0x08006650
 800221c:	08006660 	.word	0x08006660
 8002220:	08006678 	.word	0x08006678
 8002224:	08006684 	.word	0x08006684
 8002228:	080066a4 	.word	0x080066a4
 800222c:	08006258 	.word	0x08006258
 8002230:	40020000 	.word	0x40020000

08002234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b094      	sub	sp, #80	@ 0x50
 8002238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	2230      	movs	r2, #48	@ 0x30
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f003 fa7a 	bl	800573c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <SystemClock_Config+0xd0>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <SystemClock_Config+0xd0>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002266:	6413      	str	r3, [r2, #64]	@ 0x40
 8002268:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <SystemClock_Config+0xd0>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <SystemClock_Config+0xd4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002280:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <SystemClock_Config+0xd4>)
 8002282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <SystemClock_Config+0xd4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002294:	2302      	movs	r3, #2
 8002296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002298:	2301      	movs	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800229c:	2310      	movs	r3, #16
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a0:	2302      	movs	r3, #2
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022a8:	2310      	movs	r3, #16
 80022aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022b2:	2304      	movs	r3, #4
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022b6:	2307      	movs	r3, #7
 80022b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 ff8e 	bl	80041e0 <HAL_RCC_OscConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022ca:	f000 f8dd 	bl	8002488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2302      	movs	r3, #2
 80022d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 f9f0 	bl	80046d0 <HAL_RCC_ClockConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80022f6:	f000 f8c7 	bl	8002488 <Error_Handler>
  }
}
 80022fa:	bf00      	nop
 80022fc:	3750      	adds	r7, #80	@ 0x50
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <MX_I2C1_Init+0x50>)
 8002312:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <MX_I2C1_Init+0x54>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <MX_I2C1_Init+0x50>)
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <MX_I2C1_Init+0x58>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231c:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <MX_I2C1_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <MX_I2C1_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <MX_I2C1_Init+0x50>)
 800232a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800232e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <MX_I2C1_Init+0x50>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <MX_I2C1_Init+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233c:	4b07      	ldr	r3, [pc, #28]	@ (800235c <MX_I2C1_Init+0x50>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <MX_I2C1_Init+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002348:	4804      	ldr	r0, [pc, #16]	@ (800235c <MX_I2C1_Init+0x50>)
 800234a:	f000 fdf7 	bl	8002f3c <HAL_I2C_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002354:	f000 f898 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20002ac8 	.word	0x20002ac8
 8002360:	40005400 	.word	0x40005400
 8002364:	00061a80 	.word	0x00061a80

08002368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 800236e:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <MX_USART2_UART_Init+0x50>)
 8002370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 8002374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_USART2_UART_Init+0x4c>)
 80023a0:	f002 fbb6 	bl	8004b10 <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023aa:	f000 f86d 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20002b1c 	.word	0x20002b1c
 80023b8:	40004400 	.word	0x40004400

080023bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <MX_GPIO_Init+0xa8>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <MX_GPIO_Init+0xa8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <MX_GPIO_Init+0xa8>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <MX_GPIO_Init+0xa8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <MX_GPIO_Init+0xa8>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <MX_GPIO_Init+0xa8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	2120      	movs	r1, #32
 800240e:	4816      	ldr	r0, [pc, #88]	@ (8002468 <MX_GPIO_Init+0xac>)
 8002410:	f000 fd48 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 (MAX30102 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002414:	2301      	movs	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002418:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800241c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4619      	mov	r1, r3
 8002428:	480f      	ldr	r0, [pc, #60]	@ (8002468 <MX_GPIO_Init+0xac>)
 800242a:	f000 fbb7 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 (Status LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800242e:	2320      	movs	r3, #32
 8002430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4619      	mov	r1, r3
 8002444:	4808      	ldr	r0, [pc, #32]	@ (8002468 <MX_GPIO_Init+0xac>)
 8002446:	f000 fba9 	bl	8002b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2006      	movs	r0, #6
 8002450:	f000 fb6d 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002454:	2006      	movs	r0, #6
 8002456:	f000 fb86 	bl	8002b66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000

0800246c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// GPIO External Interrupt Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_EXTI_Callback+0x14>
  {
    // MAX30102 interrupt triggered
    Max30102_InterruptCallback();
 800247c:	f7fe f9ce 	bl	800081c <Max30102_InterruptCallback>
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("FATAL ERROR: System halted!\r\n");
 8002490:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <Error_Handler+0x20>)
 8002492:	f003 f873 	bl	800557c <puts>
  while (1)
  {
    // Blink LED rapidly to indicate fatal error
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002496:	2120      	movs	r1, #32
 8002498:	4804      	ldr	r0, [pc, #16]	@ (80024ac <Error_Handler+0x24>)
 800249a:	f000 fd1c 	bl	8002ed6 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800249e:	2032      	movs	r0, #50	@ 0x32
 80024a0:	f000 fa46 	bl	8002930 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80024a4:	bf00      	nop
 80024a6:	e7f6      	b.n	8002496 <Error_Handler+0xe>
 80024a8:	080066d0 	.word	0x080066d0
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ee:	2007      	movs	r0, #7
 80024f0:	f000 fb12 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	@ (8002584 <HAL_I2C_MspInit+0x84>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12b      	bne.n	800257a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23c0      	movs	r3, #192	@ 0xc0
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002542:	2312      	movs	r3, #18
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254e:	2304      	movs	r3, #4
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <HAL_I2C_MspInit+0x8c>)
 800255a:	f000 fb1f 	bl	8002b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 8002568:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_I2C_MspInit+0x88>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	@ 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40005400 	.word	0x40005400
 8002588:	40023800 	.word	0x40023800
 800258c:	40020400 	.word	0x40020400

08002590 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_UART_MspInit+0x84>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d12b      	bne.n	800260a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025ea:	230e      	movs	r3, #14
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fa:	2307      	movs	r3, #7
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <HAL_UART_MspInit+0x8c>)
 8002606:	f000 fac9 	bl	8002b9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	@ 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40004400 	.word	0x40004400
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <NMI_Handler+0x4>

08002628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f000 f93b 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}

0800267e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 fc42 	bl	8002f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}

0800268c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00a      	b.n	80026b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269e:	f3af 8000 	nop.w
 80026a2:	4601      	mov	r1, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf0      	blt.n	800269e <_read+0x12>
  }

  return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e009      	b.n	80026ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fb47 	bl	8001d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf1      	blt.n	80026d8 <_write+0x12>
  }
  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002726:	605a      	str	r2, [r3, #4]
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_isatty>:

int _isatty(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f003 f81e 	bl	80057d8 <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20018000 	.word	0x20018000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	20002b64 	.word	0x20002b64
 80027d0:	20002cb8 	.word	0x20002cb8

080027d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <SystemInit+0x20>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <SystemInit+0x20>)
 80027e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027fc:	f7ff ffea 	bl	80027d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002826:	f002 ffdd 	bl	80057e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff fab5 	bl	8001d98 <main>
  bx  lr    
 800282e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002830:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800283c:	08006844 	.word	0x08006844
  ldr r2, =_sbss
 8002840:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002844:	20002cb8 	.word	0x20002cb8

08002848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_Init+0x40>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800285a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_Init+0x40>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_Init+0x40>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 f94f 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f808 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002880:	f7ff fe16 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00

08002890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_InitTick+0x54>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_InitTick+0x58>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f967 	bl	8002b82 <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d80a      	bhi.n	80028da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f000 f92f 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4a06      	ldr	r2, [pc, #24]	@ (80028ec <HAL_InitTick+0x5c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000008 	.word	0x20000008
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_IncTick+0x20>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_IncTick+0x24>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_IncTick+0x24>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000008 	.word	0x20000008
 8002914:	20002b68 	.word	0x20002b68

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_GetTick+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20002b68 	.word	0x20002b68

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff ffee 	bl	8002918 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffde 	bl	8002918 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	@ (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	@ (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	@ (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e159      	b.n	8002e6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f040 8148 	bne.w	8002e66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d005      	beq.n	8002bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d130      	bne.n	8002c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c24:	2201      	movs	r2, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 0201 	and.w	r2, r3, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d017      	beq.n	8002c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d123      	bne.n	8002ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	08da      	lsrs	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	69b9      	ldr	r1, [r7, #24]
 8002cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80a2 	beq.w	8002e66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b57      	ldr	r3, [pc, #348]	@ (8002e84 <HAL_GPIO_Init+0x2e8>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_GPIO_Init+0x2e8>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b54      	ldr	r3, [pc, #336]	@ (8002e84 <HAL_GPIO_Init+0x2e8>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3e:	4a52      	ldr	r2, [pc, #328]	@ (8002e88 <HAL_GPIO_Init+0x2ec>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a49      	ldr	r2, [pc, #292]	@ (8002e8c <HAL_GPIO_Init+0x2f0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x202>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a48      	ldr	r2, [pc, #288]	@ (8002e90 <HAL_GPIO_Init+0x2f4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x1fe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a47      	ldr	r2, [pc, #284]	@ (8002e94 <HAL_GPIO_Init+0x2f8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x1fa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a46      	ldr	r2, [pc, #280]	@ (8002e98 <HAL_GPIO_Init+0x2fc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x1f6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a45      	ldr	r2, [pc, #276]	@ (8002e9c <HAL_GPIO_Init+0x300>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x1f2>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e008      	b.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e004      	b.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	f002 0203 	and.w	r2, r2, #3
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4093      	lsls	r3, r2
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db0:	4935      	ldr	r1, [pc, #212]	@ (8002e88 <HAL_GPIO_Init+0x2ec>)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de2:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e60:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	f67f aea2 	bls.w	8002bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020c00 	.word	0x40020c00
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	619a      	str	r2, [r3, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	041a      	lsls	r2, r3, #16
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fa9e 	bl	800246c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40013c00 	.word	0x40013c00

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e12b      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff facc 	bl	8002500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f001 fd8e 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a81      	ldr	r2, [pc, #516]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <HAL_I2C_Init+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a80      	ldr	r2, [pc, #512]	@ (80031b4 <HAL_I2C_Init+0x278>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e006      	b.n	8002fce <HAL_I2C_Init+0x92>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80031b8 <HAL_I2C_Init+0x27c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e7      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a78      	ldr	r2, [pc, #480]	@ (80031bc <HAL_I2C_Init+0x280>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a6a      	ldr	r2, [pc, #424]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <HAL_I2C_Init+0xd4>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	e009      	b.n	8003024 <HAL_I2C_Init+0xe8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a69      	ldr	r2, [pc, #420]	@ (80031c0 <HAL_I2C_Init+0x284>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003036:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	495c      	ldr	r1, [pc, #368]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8003040:	428b      	cmp	r3, r1
 8003042:	d819      	bhi.n	8003078 <HAL_I2C_Init+0x13c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_I2C_Init+0x138>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e59      	subs	r1, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb1 f3f3 	udiv	r3, r1, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	e051      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003074:	2304      	movs	r3, #4
 8003076:	e04f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <HAL_I2C_Init+0x168>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e012      	b.n	80030ca <HAL_I2C_Init+0x18e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Init+0x196>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e022      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10e      	bne.n	80030f8 <HAL_I2C_Init+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e58      	subs	r0, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6809      	ldr	r1, [r1, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003146:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6911      	ldr	r1, [r2, #16]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	000186a0 	.word	0x000186a0
 80031b4:	001e847f 	.word	0x001e847f
 80031b8:	003d08ff 	.word	0x003d08ff
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031de:	f7ff fb9b 	bl	8002918 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	f040 80d9 	bne.w	80033a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2319      	movs	r3, #25
 80031f8:	2201      	movs	r2, #1
 80031fa:	496d      	ldr	r1, [pc, #436]	@ (80033b0 <HAL_I2C_Mem_Write+0x1ec>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fdb9 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
 800320a:	e0cc      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_I2C_Mem_Write+0x56>
 8003216:	2302      	movs	r3, #2
 8003218:	e0c5      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d007      	beq.n	8003240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2221      	movs	r2, #33	@ 0x21
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2240      	movs	r2, #64	@ 0x40
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a4d      	ldr	r2, [pc, #308]	@ (80033b4 <HAL_I2C_Mem_Write+0x1f0>)
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003282:	88f8      	ldrh	r0, [r7, #6]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4603      	mov	r3, r0
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fbf0 	bl	8003a78 <I2C_RequestMemoryWrite>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d052      	beq.n	8003344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e081      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fe7e 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d107      	bne.n	80032ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06b      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b04      	cmp	r3, #4
 800330a:	d11b      	bne.n	8003344 <HAL_I2C_Mem_Write+0x180>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d017      	beq.n	8003344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1aa      	bne.n	80032a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fe71 	bl	8004038 <I2C_WaitOnBTFFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e016      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	00100002 	.word	0x00100002
 80033b4:	ffff0000 	.word	0xffff0000

080033b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	@ 0x30
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d2:	f7ff faa1 	bl	8002918 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	f040 8214 	bne.w	800380e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2319      	movs	r3, #25
 80033ec:	2201      	movs	r2, #1
 80033ee:	497b      	ldr	r1, [pc, #492]	@ (80035dc <HAL_I2C_Mem_Read+0x224>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fcbf 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e207      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2C_Mem_Read+0x56>
 800340a:	2302      	movs	r3, #2
 800340c:	e200      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2222      	movs	r2, #34	@ 0x22
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	@ 0x40
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a5b      	ldr	r2, [pc, #364]	@ (80035e0 <HAL_I2C_Mem_Read+0x228>)
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fb8c 	bl	8003ba4 <I2C_RequestMemoryRead>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1bc      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d113      	bne.n	80034c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e190      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d11b      	bne.n	8003506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e170      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350a:	2b02      	cmp	r3, #2
 800350c:	d11b      	bne.n	8003546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	e150      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800355c:	e144      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	2b03      	cmp	r3, #3
 8003564:	f200 80f1 	bhi.w	800374a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	2b01      	cmp	r3, #1
 800356e:	d123      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fda7 	bl	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e145      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b6:	e117      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d14e      	bne.n	800365e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	2200      	movs	r2, #0
 80035c8:	4906      	ldr	r1, [pc, #24]	@ (80035e4 <HAL_I2C_Mem_Read+0x22c>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fbd2 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e11a      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000
 80035e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800365c:	e0c4      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	2200      	movs	r2, #0
 8003666:	496c      	ldr	r1, [pc, #432]	@ (8003818 <HAL_I2C_Mem_Read+0x460>)
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fb83 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0cb      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	4955      	ldr	r1, [pc, #340]	@ (8003818 <HAL_I2C_Mem_Read+0x460>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb55 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e09d      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003748:	e04e      	b.n	80037e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fcba 	bl	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e058      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d124      	bne.n	80037e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f aeb6 	bne.w	800355e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e000      	b.n	8003810 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3728      	adds	r7, #40	@ 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	00010004 	.word	0x00010004

0800381c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	@ 0x28
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7ff f874 	bl	8002918 <HAL_GetTick>
 8003830:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	f040 8111 	bne.w	8003a66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2319      	movs	r3, #25
 800384a:	2201      	movs	r2, #1
 800384c:	4988      	ldr	r1, [pc, #544]	@ (8003a70 <HAL_I2C_IsDeviceReady+0x254>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fa90 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	e104      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2C_IsDeviceReady+0x50>
 8003868:	2302      	movs	r3, #2
 800386a:	e0fd      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d007      	beq.n	8003892 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2224      	movs	r2, #36	@ 0x24
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a70      	ldr	r2, [pc, #448]	@ (8003a74 <HAL_I2C_IsDeviceReady+0x258>)
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fa4e 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ec:	d103      	bne.n	80038f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0b6      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038fa:	897b      	ldrh	r3, [r7, #10]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003908:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800390a:	f7ff f805 	bl	8002918 <HAL_GetTick>
 800390e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b02      	cmp	r3, #2
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800393e:	e025      	b.n	800398c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fe ffea 	bl	8002918 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <HAL_I2C_IsDeviceReady+0x13a>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22a0      	movs	r2, #160	@ 0xa0
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2ba0      	cmp	r3, #160	@ 0xa0
 8003996:	d005      	beq.n	80039a4 <HAL_I2C_IsDeviceReady+0x188>
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_I2C_IsDeviceReady+0x188>
 800399e:	7dbb      	ldrb	r3, [r7, #22]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0cd      	beq.n	8003940 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d129      	bne.n	8003a0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	2319      	movs	r3, #25
 80039e6:	2201      	movs	r2, #1
 80039e8:	4921      	ldr	r1, [pc, #132]	@ (8003a70 <HAL_I2C_IsDeviceReady+0x254>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f9c2 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e036      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e02c      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2319      	movs	r3, #25
 8003a2e:	2201      	movs	r2, #1
 8003a30:	490f      	ldr	r1, [pc, #60]	@ (8003a70 <HAL_I2C_IsDeviceReady+0x254>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f99e 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e012      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	f4ff af32 	bcc.w	80038b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00100002 	.word	0x00100002
 8003a74:	ffff0000 	.word	0xffff0000

08003a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	4608      	mov	r0, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	817b      	strh	r3, [r7, #10]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	813b      	strh	r3, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f960 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac8:	d103      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e05f      	b.n	8003b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	492d      	ldr	r1, [pc, #180]	@ (8003ba0 <I2C_RequestMemoryWrite+0x128>)
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f9bb 	bl	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e04c      	b.n	8003b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	6a39      	ldr	r1, [r7, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa46 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d107      	bne.n	8003b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02b      	b.n	8003b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b44:	893b      	ldrh	r3, [r7, #8]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	611a      	str	r2, [r3, #16]
 8003b4e:	e021      	b.n	8003b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b60:	6a39      	ldr	r1, [r7, #32]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa20 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d107      	bne.n	8003b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e005      	b.n	8003b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	00010002 	.word	0x00010002

08003ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f8c2 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c04:	d103      	bne.n	8003c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0aa      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	4952      	ldr	r1, [pc, #328]	@ (8003d70 <I2C_RequestMemoryRead+0x1cc>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f91d 	bl	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e097      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c50:	6a39      	ldr	r1, [r7, #32]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9a8 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d107      	bne.n	8003c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e076      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c80:	893b      	ldrh	r3, [r7, #8]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	e021      	b.n	8003cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c8c:	893b      	ldrh	r3, [r7, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9c:	6a39      	ldr	r1, [r7, #32]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f982 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d107      	bne.n	8003cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e050      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc6:	893b      	ldrh	r3, [r7, #8]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd2:	6a39      	ldr	r1, [r7, #32]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f967 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d107      	bne.n	8003cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e035      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f82b 	bl	8003d74 <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d32:	d103      	bne.n	8003d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e013      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	4906      	ldr	r1, [pc, #24]	@ (8003d70 <I2C_RequestMemoryRead+0x1cc>)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f886 	bl	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	00010002 	.word	0x00010002

08003d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d84:	e048      	b.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d044      	beq.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7fe fdc3 	bl	8002918 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d139      	bne.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d10d      	bne.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	e00c      	b.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d116      	bne.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e023      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10d      	bne.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	e00c      	b.n	8003e58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d093      	beq.n	8003d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e76:	e071      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e86:	d123      	bne.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e067      	b.n	8003fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d041      	beq.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fe fd1e 	bl	8002918 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d136      	bne.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10c      	bne.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e00b      	b.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e021      	b.n	8003fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10c      	bne.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e00b      	b.n	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	43da      	mvns	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f af6d 	bne.w	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb4:	e034      	b.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f8e3 	bl	8004182 <I2C_IsAcknowledgeFailed>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e034      	b.n	8004030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d028      	beq.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe fca3 	bl	8002918 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11d      	bne.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b80      	cmp	r3, #128	@ 0x80
 8003ff0:	d016      	beq.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e007      	b.n	8004030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b80      	cmp	r3, #128	@ 0x80
 800402c:	d1c3      	bne.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004044:	e034      	b.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f89b 	bl	8004182 <I2C_IsAcknowledgeFailed>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e034      	b.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d028      	beq.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fc5b 	bl	8002918 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d016      	beq.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d1c3      	bne.n	8004046 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d4:	e049      	b.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d119      	bne.n	8004118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0210 	mvn.w	r2, #16
 80040ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e030      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7fe fbfe 	bl	8002918 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11d      	bne.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d016      	beq.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e007      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d1ae      	bne.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004198:	d11b      	bne.n	80041d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e267      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d075      	beq.n	80042ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d00c      	beq.n	8004224 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420a:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004212:	2b08      	cmp	r3, #8
 8004214:	d112      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	4b7e      	ldr	r3, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05b      	beq.n	80042e8 <HAL_RCC_OscConfig+0x108>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d157      	bne.n	80042e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e242      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004244:	d106      	bne.n	8004254 <HAL_RCC_OscConfig+0x74>
 8004246:	4b76      	ldr	r3, [pc, #472]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e01d      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x98>
 800425e:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6f      	ldr	r2, [pc, #444]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6c      	ldr	r2, [pc, #432]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004278:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a68      	ldr	r2, [pc, #416]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b66      	ldr	r3, [pc, #408]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a65      	ldr	r2, [pc, #404]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe fb3e 	bl	8002918 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fe fb3a 	bl	8002918 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e207      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xc0>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe fb2a 	bl	8002918 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe fb26 	bl	8002918 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1f3      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0xe8>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d063      	beq.n	80043be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800430a:	2b08      	cmp	r3, #8
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1c7      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	e03a      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fe fadf 	bl	8002918 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fe fadb 	bl	8002918 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1a8      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe fabe 	bl	8002918 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fe faba 	bl	8002918 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e187      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe fa9e 	bl	8002918 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe fa9a 	bl	8002918 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e167      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x200>
 80043fe:	e01b      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fe fa87 	bl	8002918 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe fa83 	bl	8002918 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e150      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004420:	40023800 	.word	0x40023800
 8004424:	42470000 	.word	0x42470000
 8004428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b88      	ldr	r3, [pc, #544]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8097 	beq.w	8004574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b81      	ldr	r3, [pc, #516]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b7d      	ldr	r3, [pc, #500]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a7c      	ldr	r2, [pc, #496]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b7a      	ldr	r3, [pc, #488]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b77      	ldr	r3, [pc, #476]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b74      	ldr	r3, [pc, #464]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a73      	ldr	r2, [pc, #460]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fe fa43 	bl	8002918 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fe fa3f 	bl	8002918 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e10c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x2ea>
 80044bc:	4b64      	ldr	r3, [pc, #400]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a63      	ldr	r2, [pc, #396]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x30c>
 80044d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044de:	4b5c      	ldr	r3, [pc, #368]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ec:	4b58      	ldr	r3, [pc, #352]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f0:	4a57      	ldr	r2, [pc, #348]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	4b55      	ldr	r3, [pc, #340]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	4a54      	ldr	r2, [pc, #336]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 0304 	bic.w	r3, r3, #4
 8004502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fe fa04 	bl	8002918 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe fa00 	bl	8002918 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0cb      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ee      	beq.n	8004514 <HAL_RCC_OscConfig+0x334>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004538:	f7fe f9ee 	bl	8002918 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe f9ea 	bl	8002918 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0b5      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004556:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ee      	bne.n	8004540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	4a38      	ldr	r2, [pc, #224]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a1 	beq.w	80046c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457e:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b08      	cmp	r3, #8
 8004588:	d05c      	beq.n	8004644 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d141      	bne.n	8004616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe f9be 	bl	8002918 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe f9ba 	bl	8002918 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e087      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	491b      	ldr	r1, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe f993 	bl	8002918 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe f98f 	bl	8002918 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e05c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x416>
 8004614:	e054      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe f97c 	bl	8002918 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe f978 	bl	8002918 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e045      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x444>
 8004642:	e03d      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e038      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	40007000 	.word	0x40007000
 8004658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x4ec>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d028      	beq.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d121      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0cc      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b68      	ldr	r3, [pc, #416]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b65      	ldr	r3, [pc, #404]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b63      	ldr	r3, [pc, #396]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b8      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a58      	ldr	r2, [pc, #352]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b53      	ldr	r3, [pc, #332]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a52      	ldr	r2, [pc, #328]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b50      	ldr	r3, [pc, #320]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494d      	ldr	r1, [pc, #308]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3f      	ldr	r3, [pc, #252]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e067      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b37      	ldr	r3, [pc, #220]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4934      	ldr	r1, [pc, #208]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fe f8aa 	bl	8002918 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fe f8a6 	bl	8002918 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e032      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4916      	ldr	r1, [pc, #88]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490e      	ldr	r1, [pc, #56]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f821 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800485a:	4602      	mov	r2, r0
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe f80a 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00
 800488c:	40023800 	.word	0x40023800
 8004890:	080067e8 	.word	0x080067e8
 8004894:	20000000 	.word	0x20000000
 8004898:	20000004 	.word	0x20000004

0800489c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b094      	sub	sp, #80	@ 0x50
 80048a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b4:	4b79      	ldr	r3, [pc, #484]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d00d      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x40>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 80e1 	bhi.w	8004a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ce:	e0db      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b73      	ldr	r3, [pc, #460]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d4:	e0db      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d6:	4b73      	ldr	r3, [pc, #460]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048da:	e0d8      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048dc:	4b6f      	ldr	r3, [pc, #444]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d063      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
 800490a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	0159      	lsls	r1, r3, #5
 800491c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004920:	0150      	lsls	r0, r2, #5
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4621      	mov	r1, r4
 8004928:	1a51      	subs	r1, r2, r1
 800492a:	6139      	str	r1, [r7, #16]
 800492c:	4629      	mov	r1, r5
 800492e:	eb63 0301 	sbc.w	r3, r3, r1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004940:	4659      	mov	r1, fp
 8004942:	018b      	lsls	r3, r1, #6
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494a:	4651      	mov	r1, sl
 800494c:	018a      	lsls	r2, r1, #6
 800494e:	4651      	mov	r1, sl
 8004950:	ebb2 0801 	subs.w	r8, r2, r1
 8004954:	4659      	mov	r1, fp
 8004956:	eb63 0901 	sbc.w	r9, r3, r1
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496e:	4690      	mov	r8, r2
 8004970:	4699      	mov	r9, r3
 8004972:	4623      	mov	r3, r4
 8004974:	eb18 0303 	adds.w	r3, r8, r3
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	462b      	mov	r3, r5
 800497c:	eb49 0303 	adc.w	r3, r9, r3
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800498e:	4629      	mov	r1, r5
 8004990:	024b      	lsls	r3, r1, #9
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004998:	4621      	mov	r1, r4
 800499a:	024a      	lsls	r2, r1, #9
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a2:	2200      	movs	r2, #0
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049ac:	f7fb fc68 	bl	8000280 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	e058      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	4611      	mov	r1, r2
 80049c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	0159      	lsls	r1, r3, #5
 80049e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e6:	0150      	lsls	r0, r2, #5
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4641      	mov	r1, r8
 80049ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a10:	eb63 050b 	sbc.w	r5, r3, fp
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	00eb      	lsls	r3, r5, #3
 8004a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	18e3      	adds	r3, r4, r3
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	464b      	mov	r3, r9
 8004a30:	eb45 0303 	adc.w	r3, r5, r3
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a42:	4629      	mov	r1, r5
 8004a44:	028b      	lsls	r3, r1, #10
 8004a46:	4621      	mov	r1, r4
 8004a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	028a      	lsls	r2, r1, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a56:	2200      	movs	r2, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	61fa      	str	r2, [r7, #28]
 8004a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3750      	adds	r7, #80	@ 0x50
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200

08004aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000000 	.word	0x20000000

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a9b      	lsrs	r3, r3, #10
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	080067f8 	.word	0x080067f8

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aec:	f7ff ffdc 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0b5b      	lsrs	r3, r3, #13
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	080067f8 	.word	0x080067f8

08004b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e042      	b.n	8004ba8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd fd2a 	bl	8002590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	@ 0x24
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f973 	bl	8004e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d175      	bne.n	8004cbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Transmit+0x2c>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e06e      	b.n	8004cbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bee:	f7fd fe93 	bl	8002918 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x6c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c24:	e02e      	b.n	8004c84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f848 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e03a      	b.n	8004cbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3302      	adds	r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e007      	b.n	8004c76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1cb      	bne.n	8004c26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2140      	movs	r1, #64	@ 0x40
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f814 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e006      	b.n	8004cbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	e03b      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d037      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	f7fd fe1a 	bl	8002918 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e03a      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d023      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b80      	cmp	r3, #128	@ 0x80
 8004d0c:	d020      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d01d      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d116      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f81d 	bl	8004d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2208      	movs	r2, #8
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e00f      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d0b4      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b095      	sub	sp, #84	@ 0x54
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004da0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d119      	bne.n	8004e24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e10:	61ba      	str	r2, [r7, #24]
 8004e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6979      	ldr	r1, [r7, #20]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e32:	bf00      	nop
 8004e34:	3754      	adds	r7, #84	@ 0x54
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b0c0      	sub	sp, #256	@ 0x100
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	68d9      	ldr	r1, [r3, #12]
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	ea40 0301 	orr.w	r3, r0, r1
 8004e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e98:	f021 010c 	bic.w	r1, r1, #12
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eba:	6999      	ldr	r1, [r3, #24]
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	ea40 0301 	orr.w	r3, r0, r1
 8004ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b8f      	ldr	r3, [pc, #572]	@ (800510c <UART_SetConfig+0x2cc>)
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d005      	beq.n	8004ee0 <UART_SetConfig+0xa0>
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b8d      	ldr	r3, [pc, #564]	@ (8005110 <UART_SetConfig+0x2d0>)
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d104      	bne.n	8004eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7ff fe02 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8004ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ee8:	e003      	b.n	8004ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eea:	f7ff fde9 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8004eee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004efc:	f040 810c 	bne.w	8005118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	1891      	adds	r1, r2, r2
 8004f18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f22:	4621      	mov	r1, r4
 8004f24:	eb12 0801 	adds.w	r8, r2, r1
 8004f28:	4629      	mov	r1, r5
 8004f2a:	eb43 0901 	adc.w	r9, r3, r1
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f42:	4690      	mov	r8, r2
 8004f44:	4699      	mov	r9, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	eb18 0303 	adds.w	r3, r8, r3
 8004f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f50:	462b      	mov	r3, r5
 8004f52:	eb49 0303 	adc.w	r3, r9, r3
 8004f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f6e:	460b      	mov	r3, r1
 8004f70:	18db      	adds	r3, r3, r3
 8004f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f74:	4613      	mov	r3, r2
 8004f76:	eb42 0303 	adc.w	r3, r2, r3
 8004f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f84:	f7fb f97c 	bl	8000280 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b61      	ldr	r3, [pc, #388]	@ (8005114 <UART_SetConfig+0x2d4>)
 8004f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	011c      	lsls	r4, r3, #4
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fb8:	4641      	mov	r1, r8
 8004fba:	eb12 0a01 	adds.w	sl, r2, r1
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd8:	4692      	mov	sl, r2
 8004fda:	469b      	mov	fp, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	eb1a 0303 	adds.w	r3, sl, r3
 8004fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005004:	460b      	mov	r3, r1
 8005006:	18db      	adds	r3, r3, r3
 8005008:	643b      	str	r3, [r7, #64]	@ 0x40
 800500a:	4613      	mov	r3, r2
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	647b      	str	r3, [r7, #68]	@ 0x44
 8005012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800501a:	f7fb f931 	bl	8000280 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4611      	mov	r1, r2
 8005024:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <UART_SetConfig+0x2d4>)
 8005026:	fba3 2301 	umull	r2, r3, r3, r1
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2264      	movs	r2, #100	@ 0x64
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	1acb      	subs	r3, r1, r3
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800503a:	4b36      	ldr	r3, [pc, #216]	@ (8005114 <UART_SetConfig+0x2d4>)
 800503c:	fba3 2302 	umull	r2, r3, r3, r2
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005048:	441c      	add	r4, r3
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005054:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	1891      	adds	r1, r2, r2
 8005062:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005064:	415b      	adcs	r3, r3
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800506c:	4641      	mov	r1, r8
 800506e:	1851      	adds	r1, r2, r1
 8005070:	6339      	str	r1, [r7, #48]	@ 0x30
 8005072:	4649      	mov	r1, r9
 8005074:	414b      	adcs	r3, r1
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005084:	4659      	mov	r1, fp
 8005086:	00cb      	lsls	r3, r1, #3
 8005088:	4651      	mov	r1, sl
 800508a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508e:	4651      	mov	r1, sl
 8005090:	00ca      	lsls	r2, r1, #3
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	4603      	mov	r3, r0
 8005098:	4642      	mov	r2, r8
 800509a:	189b      	adds	r3, r3, r2
 800509c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a0:	464b      	mov	r3, r9
 80050a2:	460a      	mov	r2, r1
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050c0:	460b      	mov	r3, r1
 80050c2:	18db      	adds	r3, r3, r3
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c6:	4613      	mov	r3, r2
 80050c8:	eb42 0303 	adc.w	r3, r2, r3
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050d6:	f7fb f8d3 	bl	8000280 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <UART_SetConfig+0x2d4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	@ 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	3332      	adds	r3, #50	@ 0x32
 80050f2:	4a08      	ldr	r2, [pc, #32]	@ (8005114 <UART_SetConfig+0x2d4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 0207 	and.w	r2, r3, #7
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4422      	add	r2, r4
 8005106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005108:	e106      	b.n	8005318 <UART_SetConfig+0x4d8>
 800510a:	bf00      	nop
 800510c:	40011000 	.word	0x40011000
 8005110:	40011400 	.word	0x40011400
 8005114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511c:	2200      	movs	r2, #0
 800511e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005122:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800512a:	4642      	mov	r2, r8
 800512c:	464b      	mov	r3, r9
 800512e:	1891      	adds	r1, r2, r2
 8005130:	6239      	str	r1, [r7, #32]
 8005132:	415b      	adcs	r3, r3
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
 8005136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800513a:	4641      	mov	r1, r8
 800513c:	1854      	adds	r4, r2, r1
 800513e:	4649      	mov	r1, r9
 8005140:	eb43 0501 	adc.w	r5, r3, r1
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	00eb      	lsls	r3, r5, #3
 800514e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005152:	00e2      	lsls	r2, r4, #3
 8005154:	4614      	mov	r4, r2
 8005156:	461d      	mov	r5, r3
 8005158:	4643      	mov	r3, r8
 800515a:	18e3      	adds	r3, r4, r3
 800515c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005160:	464b      	mov	r3, r9
 8005162:	eb45 0303 	adc.w	r3, r5, r3
 8005166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005176:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005186:	4629      	mov	r1, r5
 8005188:	008b      	lsls	r3, r1, #2
 800518a:	4621      	mov	r1, r4
 800518c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005190:	4621      	mov	r1, r4
 8005192:	008a      	lsls	r2, r1, #2
 8005194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005198:	f7fb f872 	bl	8000280 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4b60      	ldr	r3, [pc, #384]	@ (8005324 <UART_SetConfig+0x4e4>)
 80051a2:	fba3 2302 	umull	r2, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	011c      	lsls	r4, r3, #4
 80051aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	1891      	adds	r1, r2, r2
 80051c2:	61b9      	str	r1, [r7, #24]
 80051c4:	415b      	adcs	r3, r3
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051cc:	4641      	mov	r1, r8
 80051ce:	1851      	adds	r1, r2, r1
 80051d0:	6139      	str	r1, [r7, #16]
 80051d2:	4649      	mov	r1, r9
 80051d4:	414b      	adcs	r3, r1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e4:	4659      	mov	r1, fp
 80051e6:	00cb      	lsls	r3, r1, #3
 80051e8:	4651      	mov	r1, sl
 80051ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ee:	4651      	mov	r1, sl
 80051f0:	00ca      	lsls	r2, r1, #3
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	4642      	mov	r2, r8
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005200:	464b      	mov	r3, r9
 8005202:	460a      	mov	r2, r1
 8005204:	eb42 0303 	adc.w	r3, r2, r3
 8005208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005216:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005224:	4649      	mov	r1, r9
 8005226:	008b      	lsls	r3, r1, #2
 8005228:	4641      	mov	r1, r8
 800522a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800522e:	4641      	mov	r1, r8
 8005230:	008a      	lsls	r2, r1, #2
 8005232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005236:	f7fb f823 	bl	8000280 <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4611      	mov	r1, r2
 8005240:	4b38      	ldr	r3, [pc, #224]	@ (8005324 <UART_SetConfig+0x4e4>)
 8005242:	fba3 2301 	umull	r2, r3, r3, r1
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2264      	movs	r2, #100	@ 0x64
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	1acb      	subs	r3, r1, r3
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	3332      	adds	r3, #50	@ 0x32
 8005254:	4a33      	ldr	r2, [pc, #204]	@ (8005324 <UART_SetConfig+0x4e4>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005260:	441c      	add	r4, r3
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	673b      	str	r3, [r7, #112]	@ 0x70
 800526a:	677a      	str	r2, [r7, #116]	@ 0x74
 800526c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	1891      	adds	r1, r2, r2
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	415b      	adcs	r3, r3
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005280:	4641      	mov	r1, r8
 8005282:	1851      	adds	r1, r2, r1
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	4649      	mov	r1, r9
 8005288:	414b      	adcs	r3, r1
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005298:	4659      	mov	r1, fp
 800529a:	00cb      	lsls	r3, r1, #3
 800529c:	4651      	mov	r1, sl
 800529e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a2:	4651      	mov	r1, sl
 80052a4:	00ca      	lsls	r2, r1, #3
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	4642      	mov	r2, r8
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b2:	464b      	mov	r3, r9
 80052b4:	460a      	mov	r2, r1
 80052b6:	eb42 0303 	adc.w	r3, r2, r3
 80052ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80052c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052d4:	4649      	mov	r1, r9
 80052d6:	008b      	lsls	r3, r1, #2
 80052d8:	4641      	mov	r1, r8
 80052da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052de:	4641      	mov	r1, r8
 80052e0:	008a      	lsls	r2, r1, #2
 80052e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052e6:	f7fa ffcb 	bl	8000280 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <UART_SetConfig+0x4e4>)
 80052f0:	fba3 1302 	umull	r1, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2164      	movs	r1, #100	@ 0x64
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	3332      	adds	r3, #50	@ 0x32
 8005302:	4a08      	ldr	r2, [pc, #32]	@ (8005324 <UART_SetConfig+0x4e4>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4422      	add	r2, r4
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005324:	51eb851f 	.word	0x51eb851f

08005328 <std>:
 8005328:	2300      	movs	r3, #0
 800532a:	b510      	push	{r4, lr}
 800532c:	4604      	mov	r4, r0
 800532e:	e9c0 3300 	strd	r3, r3, [r0]
 8005332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005336:	6083      	str	r3, [r0, #8]
 8005338:	8181      	strh	r1, [r0, #12]
 800533a:	6643      	str	r3, [r0, #100]	@ 0x64
 800533c:	81c2      	strh	r2, [r0, #14]
 800533e:	6183      	str	r3, [r0, #24]
 8005340:	4619      	mov	r1, r3
 8005342:	2208      	movs	r2, #8
 8005344:	305c      	adds	r0, #92	@ 0x5c
 8005346:	f000 f9f9 	bl	800573c <memset>
 800534a:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <std+0x58>)
 800534c:	6263      	str	r3, [r4, #36]	@ 0x24
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <std+0x5c>)
 8005350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <std+0x60>)
 8005354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <std+0x64>)
 8005358:	6323      	str	r3, [r4, #48]	@ 0x30
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <std+0x68>)
 800535c:	6224      	str	r4, [r4, #32]
 800535e:	429c      	cmp	r4, r3
 8005360:	d006      	beq.n	8005370 <std+0x48>
 8005362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005366:	4294      	cmp	r4, r2
 8005368:	d002      	beq.n	8005370 <std+0x48>
 800536a:	33d0      	adds	r3, #208	@ 0xd0
 800536c:	429c      	cmp	r4, r3
 800536e:	d105      	bne.n	800537c <std+0x54>
 8005370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005378:	f000 ba58 	b.w	800582c <__retarget_lock_init_recursive>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	bf00      	nop
 8005380:	0800558d 	.word	0x0800558d
 8005384:	080055af 	.word	0x080055af
 8005388:	080055e7 	.word	0x080055e7
 800538c:	0800560b 	.word	0x0800560b
 8005390:	20002b6c 	.word	0x20002b6c

08005394 <stdio_exit_handler>:
 8005394:	4a02      	ldr	r2, [pc, #8]	@ (80053a0 <stdio_exit_handler+0xc>)
 8005396:	4903      	ldr	r1, [pc, #12]	@ (80053a4 <stdio_exit_handler+0x10>)
 8005398:	4803      	ldr	r0, [pc, #12]	@ (80053a8 <stdio_exit_handler+0x14>)
 800539a:	f000 b869 	b.w	8005470 <_fwalk_sglue>
 800539e:	bf00      	nop
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	080060c9 	.word	0x080060c9
 80053a8:	2000001c 	.word	0x2000001c

080053ac <cleanup_stdio>:
 80053ac:	6841      	ldr	r1, [r0, #4]
 80053ae:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <cleanup_stdio+0x34>)
 80053b0:	4299      	cmp	r1, r3
 80053b2:	b510      	push	{r4, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	d001      	beq.n	80053bc <cleanup_stdio+0x10>
 80053b8:	f000 fe86 	bl	80060c8 <_fflush_r>
 80053bc:	68a1      	ldr	r1, [r4, #8]
 80053be:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <cleanup_stdio+0x38>)
 80053c0:	4299      	cmp	r1, r3
 80053c2:	d002      	beq.n	80053ca <cleanup_stdio+0x1e>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f000 fe7f 	bl	80060c8 <_fflush_r>
 80053ca:	68e1      	ldr	r1, [r4, #12]
 80053cc:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <cleanup_stdio+0x3c>)
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d004      	beq.n	80053dc <cleanup_stdio+0x30>
 80053d2:	4620      	mov	r0, r4
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	f000 be76 	b.w	80060c8 <_fflush_r>
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	bf00      	nop
 80053e0:	20002b6c 	.word	0x20002b6c
 80053e4:	20002bd4 	.word	0x20002bd4
 80053e8:	20002c3c 	.word	0x20002c3c

080053ec <global_stdio_init.part.0>:
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <global_stdio_init.part.0+0x30>)
 80053f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005420 <global_stdio_init.part.0+0x34>)
 80053f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005424 <global_stdio_init.part.0+0x38>)
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	4620      	mov	r0, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	2104      	movs	r1, #4
 80053fc:	f7ff ff94 	bl	8005328 <std>
 8005400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005404:	2201      	movs	r2, #1
 8005406:	2109      	movs	r1, #9
 8005408:	f7ff ff8e 	bl	8005328 <std>
 800540c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005410:	2202      	movs	r2, #2
 8005412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005416:	2112      	movs	r1, #18
 8005418:	f7ff bf86 	b.w	8005328 <std>
 800541c:	20002ca4 	.word	0x20002ca4
 8005420:	20002b6c 	.word	0x20002b6c
 8005424:	08005395 	.word	0x08005395

08005428 <__sfp_lock_acquire>:
 8005428:	4801      	ldr	r0, [pc, #4]	@ (8005430 <__sfp_lock_acquire+0x8>)
 800542a:	f000 ba00 	b.w	800582e <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	20002cad 	.word	0x20002cad

08005434 <__sfp_lock_release>:
 8005434:	4801      	ldr	r0, [pc, #4]	@ (800543c <__sfp_lock_release+0x8>)
 8005436:	f000 b9fb 	b.w	8005830 <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	20002cad 	.word	0x20002cad

08005440 <__sinit>:
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	f7ff fff0 	bl	8005428 <__sfp_lock_acquire>
 8005448:	6a23      	ldr	r3, [r4, #32]
 800544a:	b11b      	cbz	r3, 8005454 <__sinit+0x14>
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	f7ff bff0 	b.w	8005434 <__sfp_lock_release>
 8005454:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <__sinit+0x28>)
 8005456:	6223      	str	r3, [r4, #32]
 8005458:	4b04      	ldr	r3, [pc, #16]	@ (800546c <__sinit+0x2c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f5      	bne.n	800544c <__sinit+0xc>
 8005460:	f7ff ffc4 	bl	80053ec <global_stdio_init.part.0>
 8005464:	e7f2      	b.n	800544c <__sinit+0xc>
 8005466:	bf00      	nop
 8005468:	080053ad 	.word	0x080053ad
 800546c:	20002ca4 	.word	0x20002ca4

08005470 <_fwalk_sglue>:
 8005470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005474:	4607      	mov	r7, r0
 8005476:	4688      	mov	r8, r1
 8005478:	4614      	mov	r4, r2
 800547a:	2600      	movs	r6, #0
 800547c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005480:	f1b9 0901 	subs.w	r9, r9, #1
 8005484:	d505      	bpl.n	8005492 <_fwalk_sglue+0x22>
 8005486:	6824      	ldr	r4, [r4, #0]
 8005488:	2c00      	cmp	r4, #0
 800548a:	d1f7      	bne.n	800547c <_fwalk_sglue+0xc>
 800548c:	4630      	mov	r0, r6
 800548e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d907      	bls.n	80054a8 <_fwalk_sglue+0x38>
 8005498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800549c:	3301      	adds	r3, #1
 800549e:	d003      	beq.n	80054a8 <_fwalk_sglue+0x38>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
 80054a6:	4306      	orrs	r6, r0
 80054a8:	3568      	adds	r5, #104	@ 0x68
 80054aa:	e7e9      	b.n	8005480 <_fwalk_sglue+0x10>

080054ac <iprintf>:
 80054ac:	b40f      	push	{r0, r1, r2, r3}
 80054ae:	b507      	push	{r0, r1, r2, lr}
 80054b0:	4906      	ldr	r1, [pc, #24]	@ (80054cc <iprintf+0x20>)
 80054b2:	ab04      	add	r3, sp, #16
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	6881      	ldr	r1, [r0, #8]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	f000 fadb 	bl	8005a78 <_vfiprintf_r>
 80054c2:	b003      	add	sp, #12
 80054c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c8:	b004      	add	sp, #16
 80054ca:	4770      	bx	lr
 80054cc:	20000018 	.word	0x20000018

080054d0 <_puts_r>:
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	6884      	ldr	r4, [r0, #8]
 80054d6:	4605      	mov	r5, r0
 80054d8:	460e      	mov	r6, r1
 80054da:	b90b      	cbnz	r3, 80054e0 <_puts_r+0x10>
 80054dc:	f7ff ffb0 	bl	8005440 <__sinit>
 80054e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054e2:	07db      	lsls	r3, r3, #31
 80054e4:	d405      	bmi.n	80054f2 <_puts_r+0x22>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	0598      	lsls	r0, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_puts_r+0x22>
 80054ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ee:	f000 f99e 	bl	800582e <__retarget_lock_acquire_recursive>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	0719      	lsls	r1, r3, #28
 80054f6:	d502      	bpl.n	80054fe <_puts_r+0x2e>
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d135      	bne.n	800556a <_puts_r+0x9a>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f8c5 	bl	8005690 <__swsetup_r>
 8005506:	b380      	cbz	r0, 800556a <_puts_r+0x9a>
 8005508:	f04f 35ff 	mov.w	r5, #4294967295
 800550c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800550e:	07da      	lsls	r2, r3, #31
 8005510:	d405      	bmi.n	800551e <_puts_r+0x4e>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	059b      	lsls	r3, r3, #22
 8005516:	d402      	bmi.n	800551e <_puts_r+0x4e>
 8005518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800551a:	f000 f989 	bl	8005830 <__retarget_lock_release_recursive>
 800551e:	4628      	mov	r0, r5
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	2b00      	cmp	r3, #0
 8005524:	da04      	bge.n	8005530 <_puts_r+0x60>
 8005526:	69a2      	ldr	r2, [r4, #24]
 8005528:	429a      	cmp	r2, r3
 800552a:	dc17      	bgt.n	800555c <_puts_r+0x8c>
 800552c:	290a      	cmp	r1, #10
 800552e:	d015      	beq.n	800555c <_puts_r+0x8c>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	7019      	strb	r1, [r3, #0]
 8005538:	68a3      	ldr	r3, [r4, #8]
 800553a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800553e:	3b01      	subs	r3, #1
 8005540:	60a3      	str	r3, [r4, #8]
 8005542:	2900      	cmp	r1, #0
 8005544:	d1ed      	bne.n	8005522 <_puts_r+0x52>
 8005546:	2b00      	cmp	r3, #0
 8005548:	da11      	bge.n	800556e <_puts_r+0x9e>
 800554a:	4622      	mov	r2, r4
 800554c:	210a      	movs	r1, #10
 800554e:	4628      	mov	r0, r5
 8005550:	f000 f85f 	bl	8005612 <__swbuf_r>
 8005554:	3001      	adds	r0, #1
 8005556:	d0d7      	beq.n	8005508 <_puts_r+0x38>
 8005558:	250a      	movs	r5, #10
 800555a:	e7d7      	b.n	800550c <_puts_r+0x3c>
 800555c:	4622      	mov	r2, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f857 	bl	8005612 <__swbuf_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d1e7      	bne.n	8005538 <_puts_r+0x68>
 8005568:	e7ce      	b.n	8005508 <_puts_r+0x38>
 800556a:	3e01      	subs	r6, #1
 800556c:	e7e4      	b.n	8005538 <_puts_r+0x68>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	6022      	str	r2, [r4, #0]
 8005574:	220a      	movs	r2, #10
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e7ee      	b.n	8005558 <_puts_r+0x88>
	...

0800557c <puts>:
 800557c:	4b02      	ldr	r3, [pc, #8]	@ (8005588 <puts+0xc>)
 800557e:	4601      	mov	r1, r0
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	f7ff bfa5 	b.w	80054d0 <_puts_r>
 8005586:	bf00      	nop
 8005588:	20000018 	.word	0x20000018

0800558c <__sread>:
 800558c:	b510      	push	{r4, lr}
 800558e:	460c      	mov	r4, r1
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	f000 f8fc 	bl	8005790 <_read_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	bfab      	itete	ge
 800559c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800559e:	89a3      	ldrhlt	r3, [r4, #12]
 80055a0:	181b      	addge	r3, r3, r0
 80055a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055a6:	bfac      	ite	ge
 80055a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055aa:	81a3      	strhlt	r3, [r4, #12]
 80055ac:	bd10      	pop	{r4, pc}

080055ae <__swrite>:
 80055ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	461f      	mov	r7, r3
 80055b4:	898b      	ldrh	r3, [r1, #12]
 80055b6:	05db      	lsls	r3, r3, #23
 80055b8:	4605      	mov	r5, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	4616      	mov	r6, r2
 80055be:	d505      	bpl.n	80055cc <__swrite+0x1e>
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	2302      	movs	r3, #2
 80055c6:	2200      	movs	r2, #0
 80055c8:	f000 f8d0 	bl	800576c <_lseek_r>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	4632      	mov	r2, r6
 80055da:	463b      	mov	r3, r7
 80055dc:	4628      	mov	r0, r5
 80055de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055e2:	f000 b8e7 	b.w	80057b4 <_write_r>

080055e6 <__sseek>:
 80055e6:	b510      	push	{r4, lr}
 80055e8:	460c      	mov	r4, r1
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 f8bd 	bl	800576c <_lseek_r>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	bf15      	itete	ne
 80055f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005602:	81a3      	strheq	r3, [r4, #12]
 8005604:	bf18      	it	ne
 8005606:	81a3      	strhne	r3, [r4, #12]
 8005608:	bd10      	pop	{r4, pc}

0800560a <__sclose>:
 800560a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560e:	f000 b89d 	b.w	800574c <_close_r>

08005612 <__swbuf_r>:
 8005612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005614:	460e      	mov	r6, r1
 8005616:	4614      	mov	r4, r2
 8005618:	4605      	mov	r5, r0
 800561a:	b118      	cbz	r0, 8005624 <__swbuf_r+0x12>
 800561c:	6a03      	ldr	r3, [r0, #32]
 800561e:	b90b      	cbnz	r3, 8005624 <__swbuf_r+0x12>
 8005620:	f7ff ff0e 	bl	8005440 <__sinit>
 8005624:	69a3      	ldr	r3, [r4, #24]
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	071a      	lsls	r2, r3, #28
 800562c:	d501      	bpl.n	8005632 <__swbuf_r+0x20>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	b943      	cbnz	r3, 8005644 <__swbuf_r+0x32>
 8005632:	4621      	mov	r1, r4
 8005634:	4628      	mov	r0, r5
 8005636:	f000 f82b 	bl	8005690 <__swsetup_r>
 800563a:	b118      	cbz	r0, 8005644 <__swbuf_r+0x32>
 800563c:	f04f 37ff 	mov.w	r7, #4294967295
 8005640:	4638      	mov	r0, r7
 8005642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	6922      	ldr	r2, [r4, #16]
 8005648:	1a98      	subs	r0, r3, r2
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	b2f6      	uxtb	r6, r6
 800564e:	4283      	cmp	r3, r0
 8005650:	4637      	mov	r7, r6
 8005652:	dc05      	bgt.n	8005660 <__swbuf_r+0x4e>
 8005654:	4621      	mov	r1, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fd36 	bl	80060c8 <_fflush_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	d1ed      	bne.n	800563c <__swbuf_r+0x2a>
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	3b01      	subs	r3, #1
 8005664:	60a3      	str	r3, [r4, #8]
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	701e      	strb	r6, [r3, #0]
 800566e:	6962      	ldr	r2, [r4, #20]
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	429a      	cmp	r2, r3
 8005674:	d004      	beq.n	8005680 <__swbuf_r+0x6e>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	07db      	lsls	r3, r3, #31
 800567a:	d5e1      	bpl.n	8005640 <__swbuf_r+0x2e>
 800567c:	2e0a      	cmp	r6, #10
 800567e:	d1df      	bne.n	8005640 <__swbuf_r+0x2e>
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fd20 	bl	80060c8 <_fflush_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d0d9      	beq.n	8005640 <__swbuf_r+0x2e>
 800568c:	e7d6      	b.n	800563c <__swbuf_r+0x2a>
	...

08005690 <__swsetup_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4b29      	ldr	r3, [pc, #164]	@ (8005738 <__swsetup_r+0xa8>)
 8005694:	4605      	mov	r5, r0
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	460c      	mov	r4, r1
 800569a:	b118      	cbz	r0, 80056a4 <__swsetup_r+0x14>
 800569c:	6a03      	ldr	r3, [r0, #32]
 800569e:	b90b      	cbnz	r3, 80056a4 <__swsetup_r+0x14>
 80056a0:	f7ff fece 	bl	8005440 <__sinit>
 80056a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a8:	0719      	lsls	r1, r3, #28
 80056aa:	d422      	bmi.n	80056f2 <__swsetup_r+0x62>
 80056ac:	06da      	lsls	r2, r3, #27
 80056ae:	d407      	bmi.n	80056c0 <__swsetup_r+0x30>
 80056b0:	2209      	movs	r2, #9
 80056b2:	602a      	str	r2, [r5, #0]
 80056b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295
 80056be:	e033      	b.n	8005728 <__swsetup_r+0x98>
 80056c0:	0758      	lsls	r0, r3, #29
 80056c2:	d512      	bpl.n	80056ea <__swsetup_r+0x5a>
 80056c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056c6:	b141      	cbz	r1, 80056da <__swsetup_r+0x4a>
 80056c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056cc:	4299      	cmp	r1, r3
 80056ce:	d002      	beq.n	80056d6 <__swsetup_r+0x46>
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 f8af 	bl	8005834 <_free_r>
 80056d6:	2300      	movs	r3, #0
 80056d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	b94b      	cbnz	r3, 800570a <__swsetup_r+0x7a>
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005700:	d003      	beq.n	800570a <__swsetup_r+0x7a>
 8005702:	4621      	mov	r1, r4
 8005704:	4628      	mov	r0, r5
 8005706:	f000 fd2d 	bl	8006164 <__smakebuf_r>
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	f013 0201 	ands.w	r2, r3, #1
 8005712:	d00a      	beq.n	800572a <__swsetup_r+0x9a>
 8005714:	2200      	movs	r2, #0
 8005716:	60a2      	str	r2, [r4, #8]
 8005718:	6962      	ldr	r2, [r4, #20]
 800571a:	4252      	negs	r2, r2
 800571c:	61a2      	str	r2, [r4, #24]
 800571e:	6922      	ldr	r2, [r4, #16]
 8005720:	b942      	cbnz	r2, 8005734 <__swsetup_r+0xa4>
 8005722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005726:	d1c5      	bne.n	80056b4 <__swsetup_r+0x24>
 8005728:	bd38      	pop	{r3, r4, r5, pc}
 800572a:	0799      	lsls	r1, r3, #30
 800572c:	bf58      	it	pl
 800572e:	6962      	ldrpl	r2, [r4, #20]
 8005730:	60a2      	str	r2, [r4, #8]
 8005732:	e7f4      	b.n	800571e <__swsetup_r+0x8e>
 8005734:	2000      	movs	r0, #0
 8005736:	e7f7      	b.n	8005728 <__swsetup_r+0x98>
 8005738:	20000018 	.word	0x20000018

0800573c <memset>:
 800573c:	4402      	add	r2, r0
 800573e:	4603      	mov	r3, r0
 8005740:	4293      	cmp	r3, r2
 8005742:	d100      	bne.n	8005746 <memset+0xa>
 8005744:	4770      	bx	lr
 8005746:	f803 1b01 	strb.w	r1, [r3], #1
 800574a:	e7f9      	b.n	8005740 <memset+0x4>

0800574c <_close_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d06      	ldr	r5, [pc, #24]	@ (8005768 <_close_r+0x1c>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fc ffd1 	bl	80026fe <_close>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_close_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_close_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20002ca8 	.word	0x20002ca8

0800576c <_lseek_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	@ (800578c <_lseek_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fc ffe6 	bl	800274c <_lseek>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_lseek_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_lseek_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20002ca8 	.word	0x20002ca8

08005790 <_read_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d07      	ldr	r5, [pc, #28]	@ (80057b0 <_read_r+0x20>)
 8005794:	4604      	mov	r4, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fc ff74 	bl	800268c <_read>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_read_r+0x1e>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_read_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20002ca8 	.word	0x20002ca8

080057b4 <_write_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	@ (80057d4 <_write_r+0x20>)
 80057b8:	4604      	mov	r4, r0
 80057ba:	4608      	mov	r0, r1
 80057bc:	4611      	mov	r1, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fc ff7f 	bl	80026c6 <_write>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_write_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_write_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	20002ca8 	.word	0x20002ca8

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	@ (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000018 	.word	0x20000018

080057e4 <__libc_init_array>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4d0d      	ldr	r5, [pc, #52]	@ (800581c <__libc_init_array+0x38>)
 80057e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005820 <__libc_init_array+0x3c>)
 80057ea:	1b64      	subs	r4, r4, r5
 80057ec:	10a4      	asrs	r4, r4, #2
 80057ee:	2600      	movs	r6, #0
 80057f0:	42a6      	cmp	r6, r4
 80057f2:	d109      	bne.n	8005808 <__libc_init_array+0x24>
 80057f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005824 <__libc_init_array+0x40>)
 80057f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005828 <__libc_init_array+0x44>)
 80057f8:	f000 fd22 	bl	8006240 <_init>
 80057fc:	1b64      	subs	r4, r4, r5
 80057fe:	10a4      	asrs	r4, r4, #2
 8005800:	2600      	movs	r6, #0
 8005802:	42a6      	cmp	r6, r4
 8005804:	d105      	bne.n	8005812 <__libc_init_array+0x2e>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	f855 3b04 	ldr.w	r3, [r5], #4
 800580c:	4798      	blx	r3
 800580e:	3601      	adds	r6, #1
 8005810:	e7ee      	b.n	80057f0 <__libc_init_array+0xc>
 8005812:	f855 3b04 	ldr.w	r3, [r5], #4
 8005816:	4798      	blx	r3
 8005818:	3601      	adds	r6, #1
 800581a:	e7f2      	b.n	8005802 <__libc_init_array+0x1e>
 800581c:	0800683c 	.word	0x0800683c
 8005820:	0800683c 	.word	0x0800683c
 8005824:	0800683c 	.word	0x0800683c
 8005828:	08006840 	.word	0x08006840

0800582c <__retarget_lock_init_recursive>:
 800582c:	4770      	bx	lr

0800582e <__retarget_lock_acquire_recursive>:
 800582e:	4770      	bx	lr

08005830 <__retarget_lock_release_recursive>:
 8005830:	4770      	bx	lr
	...

08005834 <_free_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4605      	mov	r5, r0
 8005838:	2900      	cmp	r1, #0
 800583a:	d041      	beq.n	80058c0 <_free_r+0x8c>
 800583c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005840:	1f0c      	subs	r4, r1, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfb8      	it	lt
 8005846:	18e4      	addlt	r4, r4, r3
 8005848:	f000 f8e0 	bl	8005a0c <__malloc_lock>
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <_free_r+0x90>)
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	b933      	cbnz	r3, 8005860 <_free_r+0x2c>
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	6014      	str	r4, [r2, #0]
 8005856:	4628      	mov	r0, r5
 8005858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800585c:	f000 b8dc 	b.w	8005a18 <__malloc_unlock>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d908      	bls.n	8005876 <_free_r+0x42>
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	1821      	adds	r1, r4, r0
 8005868:	428b      	cmp	r3, r1
 800586a:	bf01      	itttt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	e7ed      	b.n	8005852 <_free_r+0x1e>
 8005876:	461a      	mov	r2, r3
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	b10b      	cbz	r3, 8005880 <_free_r+0x4c>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d9fa      	bls.n	8005876 <_free_r+0x42>
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	1850      	adds	r0, r2, r1
 8005884:	42a0      	cmp	r0, r4
 8005886:	d10b      	bne.n	80058a0 <_free_r+0x6c>
 8005888:	6820      	ldr	r0, [r4, #0]
 800588a:	4401      	add	r1, r0
 800588c:	1850      	adds	r0, r2, r1
 800588e:	4283      	cmp	r3, r0
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	d1e0      	bne.n	8005856 <_free_r+0x22>
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	6053      	str	r3, [r2, #4]
 800589a:	4408      	add	r0, r1
 800589c:	6010      	str	r0, [r2, #0]
 800589e:	e7da      	b.n	8005856 <_free_r+0x22>
 80058a0:	d902      	bls.n	80058a8 <_free_r+0x74>
 80058a2:	230c      	movs	r3, #12
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	e7d6      	b.n	8005856 <_free_r+0x22>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	1821      	adds	r1, r4, r0
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf04      	itt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	bf04      	itt	eq
 80058b8:	1809      	addeq	r1, r1, r0
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	6054      	str	r4, [r2, #4]
 80058be:	e7ca      	b.n	8005856 <_free_r+0x22>
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	bf00      	nop
 80058c4:	20002cb4 	.word	0x20002cb4

080058c8 <sbrk_aligned>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005908 <sbrk_aligned+0x40>)
 80058cc:	460c      	mov	r4, r1
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	4605      	mov	r5, r0
 80058d2:	b911      	cbnz	r1, 80058da <sbrk_aligned+0x12>
 80058d4:	f000 fca4 	bl	8006220 <_sbrk_r>
 80058d8:	6030      	str	r0, [r6, #0]
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 fc9f 	bl	8006220 <_sbrk_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d103      	bne.n	80058ee <sbrk_aligned+0x26>
 80058e6:	f04f 34ff 	mov.w	r4, #4294967295
 80058ea:	4620      	mov	r0, r4
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
 80058ee:	1cc4      	adds	r4, r0, #3
 80058f0:	f024 0403 	bic.w	r4, r4, #3
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d0f8      	beq.n	80058ea <sbrk_aligned+0x22>
 80058f8:	1a21      	subs	r1, r4, r0
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fc90 	bl	8006220 <_sbrk_r>
 8005900:	3001      	adds	r0, #1
 8005902:	d1f2      	bne.n	80058ea <sbrk_aligned+0x22>
 8005904:	e7ef      	b.n	80058e6 <sbrk_aligned+0x1e>
 8005906:	bf00      	nop
 8005908:	20002cb0 	.word	0x20002cb0

0800590c <_malloc_r>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	1ccd      	adds	r5, r1, #3
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	3508      	adds	r5, #8
 8005918:	2d0c      	cmp	r5, #12
 800591a:	bf38      	it	cc
 800591c:	250c      	movcc	r5, #12
 800591e:	2d00      	cmp	r5, #0
 8005920:	4606      	mov	r6, r0
 8005922:	db01      	blt.n	8005928 <_malloc_r+0x1c>
 8005924:	42a9      	cmp	r1, r5
 8005926:	d904      	bls.n	8005932 <_malloc_r+0x26>
 8005928:	230c      	movs	r3, #12
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	2000      	movs	r0, #0
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a08 <_malloc_r+0xfc>
 8005936:	f000 f869 	bl	8005a0c <__malloc_lock>
 800593a:	f8d8 3000 	ldr.w	r3, [r8]
 800593e:	461c      	mov	r4, r3
 8005940:	bb44      	cbnz	r4, 8005994 <_malloc_r+0x88>
 8005942:	4629      	mov	r1, r5
 8005944:	4630      	mov	r0, r6
 8005946:	f7ff ffbf 	bl	80058c8 <sbrk_aligned>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	4604      	mov	r4, r0
 800594e:	d158      	bne.n	8005a02 <_malloc_r+0xf6>
 8005950:	f8d8 4000 	ldr.w	r4, [r8]
 8005954:	4627      	mov	r7, r4
 8005956:	2f00      	cmp	r7, #0
 8005958:	d143      	bne.n	80059e2 <_malloc_r+0xd6>
 800595a:	2c00      	cmp	r4, #0
 800595c:	d04b      	beq.n	80059f6 <_malloc_r+0xea>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4639      	mov	r1, r7
 8005962:	4630      	mov	r0, r6
 8005964:	eb04 0903 	add.w	r9, r4, r3
 8005968:	f000 fc5a 	bl	8006220 <_sbrk_r>
 800596c:	4581      	cmp	r9, r0
 800596e:	d142      	bne.n	80059f6 <_malloc_r+0xea>
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	1a6d      	subs	r5, r5, r1
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ffa6 	bl	80058c8 <sbrk_aligned>
 800597c:	3001      	adds	r0, #1
 800597e:	d03a      	beq.n	80059f6 <_malloc_r+0xea>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	442b      	add	r3, r5
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	f8d8 3000 	ldr.w	r3, [r8]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	bb62      	cbnz	r2, 80059e8 <_malloc_r+0xdc>
 800598e:	f8c8 7000 	str.w	r7, [r8]
 8005992:	e00f      	b.n	80059b4 <_malloc_r+0xa8>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	1b52      	subs	r2, r2, r5
 8005998:	d420      	bmi.n	80059dc <_malloc_r+0xd0>
 800599a:	2a0b      	cmp	r2, #11
 800599c:	d917      	bls.n	80059ce <_malloc_r+0xc2>
 800599e:	1961      	adds	r1, r4, r5
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	6025      	str	r5, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	6059      	strne	r1, [r3, #4]
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	bf08      	it	eq
 80059ac:	f8c8 1000 	streq.w	r1, [r8]
 80059b0:	5162      	str	r2, [r4, r5]
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	4630      	mov	r0, r6
 80059b6:	f000 f82f 	bl	8005a18 <__malloc_unlock>
 80059ba:	f104 000b 	add.w	r0, r4, #11
 80059be:	1d23      	adds	r3, r4, #4
 80059c0:	f020 0007 	bic.w	r0, r0, #7
 80059c4:	1ac2      	subs	r2, r0, r3
 80059c6:	bf1c      	itt	ne
 80059c8:	1a1b      	subne	r3, r3, r0
 80059ca:	50a3      	strne	r3, [r4, r2]
 80059cc:	e7af      	b.n	800592e <_malloc_r+0x22>
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	bf0c      	ite	eq
 80059d4:	f8c8 2000 	streq.w	r2, [r8]
 80059d8:	605a      	strne	r2, [r3, #4]
 80059da:	e7eb      	b.n	80059b4 <_malloc_r+0xa8>
 80059dc:	4623      	mov	r3, r4
 80059de:	6864      	ldr	r4, [r4, #4]
 80059e0:	e7ae      	b.n	8005940 <_malloc_r+0x34>
 80059e2:	463c      	mov	r4, r7
 80059e4:	687f      	ldr	r7, [r7, #4]
 80059e6:	e7b6      	b.n	8005956 <_malloc_r+0x4a>
 80059e8:	461a      	mov	r2, r3
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d1fb      	bne.n	80059e8 <_malloc_r+0xdc>
 80059f0:	2300      	movs	r3, #0
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7de      	b.n	80059b4 <_malloc_r+0xa8>
 80059f6:	230c      	movs	r3, #12
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	4630      	mov	r0, r6
 80059fc:	f000 f80c 	bl	8005a18 <__malloc_unlock>
 8005a00:	e794      	b.n	800592c <_malloc_r+0x20>
 8005a02:	6005      	str	r5, [r0, #0]
 8005a04:	e7d6      	b.n	80059b4 <_malloc_r+0xa8>
 8005a06:	bf00      	nop
 8005a08:	20002cb4 	.word	0x20002cb4

08005a0c <__malloc_lock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__malloc_lock+0x8>)
 8005a0e:	f7ff bf0e 	b.w	800582e <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	20002cac 	.word	0x20002cac

08005a18 <__malloc_unlock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__malloc_unlock+0x8>)
 8005a1a:	f7ff bf09 	b.w	8005830 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20002cac 	.word	0x20002cac

08005a24 <__sfputc_r>:
 8005a24:	6893      	ldr	r3, [r2, #8]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	b410      	push	{r4}
 8005a2c:	6093      	str	r3, [r2, #8]
 8005a2e:	da08      	bge.n	8005a42 <__sfputc_r+0x1e>
 8005a30:	6994      	ldr	r4, [r2, #24]
 8005a32:	42a3      	cmp	r3, r4
 8005a34:	db01      	blt.n	8005a3a <__sfputc_r+0x16>
 8005a36:	290a      	cmp	r1, #10
 8005a38:	d103      	bne.n	8005a42 <__sfputc_r+0x1e>
 8005a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a3e:	f7ff bde8 	b.w	8005612 <__swbuf_r>
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	1c58      	adds	r0, r3, #1
 8005a46:	6010      	str	r0, [r2, #0]
 8005a48:	7019      	strb	r1, [r3, #0]
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <__sfputs_r>:
 8005a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a54:	4606      	mov	r6, r0
 8005a56:	460f      	mov	r7, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	18d5      	adds	r5, r2, r3
 8005a5c:	42ac      	cmp	r4, r5
 8005a5e:	d101      	bne.n	8005a64 <__sfputs_r+0x12>
 8005a60:	2000      	movs	r0, #0
 8005a62:	e007      	b.n	8005a74 <__sfputs_r+0x22>
 8005a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a68:	463a      	mov	r2, r7
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7ff ffda 	bl	8005a24 <__sfputc_r>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d1f3      	bne.n	8005a5c <__sfputs_r+0xa>
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a78 <_vfiprintf_r>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	460d      	mov	r5, r1
 8005a7e:	b09d      	sub	sp, #116	@ 0x74
 8005a80:	4614      	mov	r4, r2
 8005a82:	4698      	mov	r8, r3
 8005a84:	4606      	mov	r6, r0
 8005a86:	b118      	cbz	r0, 8005a90 <_vfiprintf_r+0x18>
 8005a88:	6a03      	ldr	r3, [r0, #32]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <_vfiprintf_r+0x18>
 8005a8c:	f7ff fcd8 	bl	8005440 <__sinit>
 8005a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a92:	07d9      	lsls	r1, r3, #31
 8005a94:	d405      	bmi.n	8005aa2 <_vfiprintf_r+0x2a>
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	059a      	lsls	r2, r3, #22
 8005a9a:	d402      	bmi.n	8005aa2 <_vfiprintf_r+0x2a>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a9e:	f7ff fec6 	bl	800582e <__retarget_lock_acquire_recursive>
 8005aa2:	89ab      	ldrh	r3, [r5, #12]
 8005aa4:	071b      	lsls	r3, r3, #28
 8005aa6:	d501      	bpl.n	8005aac <_vfiprintf_r+0x34>
 8005aa8:	692b      	ldr	r3, [r5, #16]
 8005aaa:	b99b      	cbnz	r3, 8005ad4 <_vfiprintf_r+0x5c>
 8005aac:	4629      	mov	r1, r5
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f7ff fdee 	bl	8005690 <__swsetup_r>
 8005ab4:	b170      	cbz	r0, 8005ad4 <_vfiprintf_r+0x5c>
 8005ab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab8:	07dc      	lsls	r4, r3, #31
 8005aba:	d504      	bpl.n	8005ac6 <_vfiprintf_r+0x4e>
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	b01d      	add	sp, #116	@ 0x74
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	0598      	lsls	r0, r3, #22
 8005aca:	d4f7      	bmi.n	8005abc <_vfiprintf_r+0x44>
 8005acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ace:	f7ff feaf 	bl	8005830 <__retarget_lock_release_recursive>
 8005ad2:	e7f3      	b.n	8005abc <_vfiprintf_r+0x44>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae2:	2330      	movs	r3, #48	@ 0x30
 8005ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c94 <_vfiprintf_r+0x21c>
 8005ae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aec:	f04f 0901 	mov.w	r9, #1
 8005af0:	4623      	mov	r3, r4
 8005af2:	469a      	mov	sl, r3
 8005af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005af8:	b10a      	cbz	r2, 8005afe <_vfiprintf_r+0x86>
 8005afa:	2a25      	cmp	r2, #37	@ 0x25
 8005afc:	d1f9      	bne.n	8005af2 <_vfiprintf_r+0x7a>
 8005afe:	ebba 0b04 	subs.w	fp, sl, r4
 8005b02:	d00b      	beq.n	8005b1c <_vfiprintf_r+0xa4>
 8005b04:	465b      	mov	r3, fp
 8005b06:	4622      	mov	r2, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7ff ffa1 	bl	8005a52 <__sfputs_r>
 8005b10:	3001      	adds	r0, #1
 8005b12:	f000 80a7 	beq.w	8005c64 <_vfiprintf_r+0x1ec>
 8005b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b18:	445a      	add	r2, fp
 8005b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 809f 	beq.w	8005c64 <_vfiprintf_r+0x1ec>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b30:	f10a 0a01 	add.w	sl, sl, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b3e:	4654      	mov	r4, sl
 8005b40:	2205      	movs	r2, #5
 8005b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b46:	4853      	ldr	r0, [pc, #332]	@ (8005c94 <_vfiprintf_r+0x21c>)
 8005b48:	f7fa fb4a 	bl	80001e0 <memchr>
 8005b4c:	9a04      	ldr	r2, [sp, #16]
 8005b4e:	b9d8      	cbnz	r0, 8005b88 <_vfiprintf_r+0x110>
 8005b50:	06d1      	lsls	r1, r2, #27
 8005b52:	bf44      	itt	mi
 8005b54:	2320      	movmi	r3, #32
 8005b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b5a:	0713      	lsls	r3, r2, #28
 8005b5c:	bf44      	itt	mi
 8005b5e:	232b      	movmi	r3, #43	@ 0x2b
 8005b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b64:	f89a 3000 	ldrb.w	r3, [sl]
 8005b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b6a:	d015      	beq.n	8005b98 <_vfiprintf_r+0x120>
 8005b6c:	9a07      	ldr	r2, [sp, #28]
 8005b6e:	4654      	mov	r4, sl
 8005b70:	2000      	movs	r0, #0
 8005b72:	f04f 0c0a 	mov.w	ip, #10
 8005b76:	4621      	mov	r1, r4
 8005b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b7c:	3b30      	subs	r3, #48	@ 0x30
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	d94b      	bls.n	8005c1a <_vfiprintf_r+0x1a2>
 8005b82:	b1b0      	cbz	r0, 8005bb2 <_vfiprintf_r+0x13a>
 8005b84:	9207      	str	r2, [sp, #28]
 8005b86:	e014      	b.n	8005bb2 <_vfiprintf_r+0x13a>
 8005b88:	eba0 0308 	sub.w	r3, r0, r8
 8005b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	46a2      	mov	sl, r4
 8005b96:	e7d2      	b.n	8005b3e <_vfiprintf_r+0xc6>
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	1d19      	adds	r1, r3, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	9103      	str	r1, [sp, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bfbb      	ittet	lt
 8005ba4:	425b      	neglt	r3, r3
 8005ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8005baa:	9307      	strge	r3, [sp, #28]
 8005bac:	9307      	strlt	r3, [sp, #28]
 8005bae:	bfb8      	it	lt
 8005bb0:	9204      	strlt	r2, [sp, #16]
 8005bb2:	7823      	ldrb	r3, [r4, #0]
 8005bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb6:	d10a      	bne.n	8005bce <_vfiprintf_r+0x156>
 8005bb8:	7863      	ldrb	r3, [r4, #1]
 8005bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bbc:	d132      	bne.n	8005c24 <_vfiprintf_r+0x1ac>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	1d1a      	adds	r2, r3, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	9203      	str	r2, [sp, #12]
 8005bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bca:	3402      	adds	r4, #2
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ca4 <_vfiprintf_r+0x22c>
 8005bd2:	7821      	ldrb	r1, [r4, #0]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	f7fa fb02 	bl	80001e0 <memchr>
 8005bdc:	b138      	cbz	r0, 8005bee <_vfiprintf_r+0x176>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	eba0 000a 	sub.w	r0, r0, sl
 8005be4:	2240      	movs	r2, #64	@ 0x40
 8005be6:	4082      	lsls	r2, r0
 8005be8:	4313      	orrs	r3, r2
 8005bea:	3401      	adds	r4, #1
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf2:	4829      	ldr	r0, [pc, #164]	@ (8005c98 <_vfiprintf_r+0x220>)
 8005bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	f7fa faf1 	bl	80001e0 <memchr>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d03f      	beq.n	8005c82 <_vfiprintf_r+0x20a>
 8005c02:	4b26      	ldr	r3, [pc, #152]	@ (8005c9c <_vfiprintf_r+0x224>)
 8005c04:	bb1b      	cbnz	r3, 8005c4e <_vfiprintf_r+0x1d6>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	3307      	adds	r3, #7
 8005c0a:	f023 0307 	bic.w	r3, r3, #7
 8005c0e:	3308      	adds	r3, #8
 8005c10:	9303      	str	r3, [sp, #12]
 8005c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c14:	443b      	add	r3, r7
 8005c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c18:	e76a      	b.n	8005af0 <_vfiprintf_r+0x78>
 8005c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c1e:	460c      	mov	r4, r1
 8005c20:	2001      	movs	r0, #1
 8005c22:	e7a8      	b.n	8005b76 <_vfiprintf_r+0xfe>
 8005c24:	2300      	movs	r3, #0
 8005c26:	3401      	adds	r4, #1
 8005c28:	9305      	str	r3, [sp, #20]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f04f 0c0a 	mov.w	ip, #10
 8005c30:	4620      	mov	r0, r4
 8005c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c36:	3a30      	subs	r2, #48	@ 0x30
 8005c38:	2a09      	cmp	r2, #9
 8005c3a:	d903      	bls.n	8005c44 <_vfiprintf_r+0x1cc>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0c6      	beq.n	8005bce <_vfiprintf_r+0x156>
 8005c40:	9105      	str	r1, [sp, #20]
 8005c42:	e7c4      	b.n	8005bce <_vfiprintf_r+0x156>
 8005c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c48:	4604      	mov	r4, r0
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7f0      	b.n	8005c30 <_vfiprintf_r+0x1b8>
 8005c4e:	ab03      	add	r3, sp, #12
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	462a      	mov	r2, r5
 8005c54:	4b12      	ldr	r3, [pc, #72]	@ (8005ca0 <_vfiprintf_r+0x228>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f3af 8000 	nop.w
 8005c5e:	4607      	mov	r7, r0
 8005c60:	1c78      	adds	r0, r7, #1
 8005c62:	d1d6      	bne.n	8005c12 <_vfiprintf_r+0x19a>
 8005c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c66:	07d9      	lsls	r1, r3, #31
 8005c68:	d405      	bmi.n	8005c76 <_vfiprintf_r+0x1fe>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	059a      	lsls	r2, r3, #22
 8005c6e:	d402      	bmi.n	8005c76 <_vfiprintf_r+0x1fe>
 8005c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c72:	f7ff fddd 	bl	8005830 <__retarget_lock_release_recursive>
 8005c76:	89ab      	ldrh	r3, [r5, #12]
 8005c78:	065b      	lsls	r3, r3, #25
 8005c7a:	f53f af1f 	bmi.w	8005abc <_vfiprintf_r+0x44>
 8005c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c80:	e71e      	b.n	8005ac0 <_vfiprintf_r+0x48>
 8005c82:	ab03      	add	r3, sp, #12
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	462a      	mov	r2, r5
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <_vfiprintf_r+0x228>)
 8005c8a:	a904      	add	r1, sp, #16
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f879 	bl	8005d84 <_printf_i>
 8005c92:	e7e4      	b.n	8005c5e <_vfiprintf_r+0x1e6>
 8005c94:	08006800 	.word	0x08006800
 8005c98:	0800680a 	.word	0x0800680a
 8005c9c:	00000000 	.word	0x00000000
 8005ca0:	08005a53 	.word	0x08005a53
 8005ca4:	08006806 	.word	0x08006806

08005ca8 <_printf_common>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	4616      	mov	r6, r2
 8005cae:	4698      	mov	r8, r3
 8005cb0:	688a      	ldr	r2, [r1, #8]
 8005cb2:	690b      	ldr	r3, [r1, #16]
 8005cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	bfb8      	it	lt
 8005cbc:	4613      	movlt	r3, r2
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b10a      	cbz	r2, 8005cce <_printf_common+0x26>
 8005cca:	3301      	adds	r3, #1
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	0699      	lsls	r1, r3, #26
 8005cd2:	bf42      	ittt	mi
 8005cd4:	6833      	ldrmi	r3, [r6, #0]
 8005cd6:	3302      	addmi	r3, #2
 8005cd8:	6033      	strmi	r3, [r6, #0]
 8005cda:	6825      	ldr	r5, [r4, #0]
 8005cdc:	f015 0506 	ands.w	r5, r5, #6
 8005ce0:	d106      	bne.n	8005cf0 <_printf_common+0x48>
 8005ce2:	f104 0a19 	add.w	sl, r4, #25
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	6832      	ldr	r2, [r6, #0]
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dc26      	bgt.n	8005d3e <_printf_common+0x96>
 8005cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	3b00      	subs	r3, #0
 8005cf8:	bf18      	it	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	0692      	lsls	r2, r2, #26
 8005cfe:	d42b      	bmi.n	8005d58 <_printf_common+0xb0>
 8005d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d04:	4641      	mov	r1, r8
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c8      	blx	r9
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d01e      	beq.n	8005d4c <_printf_common+0xa4>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6922      	ldr	r2, [r4, #16]
 8005d12:	f003 0306 	and.w	r3, r3, #6
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	bf02      	ittt	eq
 8005d1a:	68e5      	ldreq	r5, [r4, #12]
 8005d1c:	6833      	ldreq	r3, [r6, #0]
 8005d1e:	1aed      	subeq	r5, r5, r3
 8005d20:	68a3      	ldr	r3, [r4, #8]
 8005d22:	bf0c      	ite	eq
 8005d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d28:	2500      	movne	r5, #0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	bfc4      	itt	gt
 8005d2e:	1a9b      	subgt	r3, r3, r2
 8005d30:	18ed      	addgt	r5, r5, r3
 8005d32:	2600      	movs	r6, #0
 8005d34:	341a      	adds	r4, #26
 8005d36:	42b5      	cmp	r5, r6
 8005d38:	d11a      	bne.n	8005d70 <_printf_common+0xc8>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e008      	b.n	8005d50 <_printf_common+0xa8>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4652      	mov	r2, sl
 8005d42:	4641      	mov	r1, r8
 8005d44:	4638      	mov	r0, r7
 8005d46:	47c8      	blx	r9
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d103      	bne.n	8005d54 <_printf_common+0xac>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	3501      	adds	r5, #1
 8005d56:	e7c6      	b.n	8005ce6 <_printf_common+0x3e>
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	2030      	movs	r0, #48	@ 0x30
 8005d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d62:	4422      	add	r2, r4
 8005d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	e7c7      	b.n	8005d00 <_printf_common+0x58>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4622      	mov	r2, r4
 8005d74:	4641      	mov	r1, r8
 8005d76:	4638      	mov	r0, r7
 8005d78:	47c8      	blx	r9
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d0e6      	beq.n	8005d4c <_printf_common+0xa4>
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7d9      	b.n	8005d36 <_printf_common+0x8e>
	...

08005d84 <_printf_i>:
 8005d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	7e0f      	ldrb	r7, [r1, #24]
 8005d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d8c:	2f78      	cmp	r7, #120	@ 0x78
 8005d8e:	4691      	mov	r9, r2
 8005d90:	4680      	mov	r8, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	469a      	mov	sl, r3
 8005d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d9a:	d807      	bhi.n	8005dac <_printf_i+0x28>
 8005d9c:	2f62      	cmp	r7, #98	@ 0x62
 8005d9e:	d80a      	bhi.n	8005db6 <_printf_i+0x32>
 8005da0:	2f00      	cmp	r7, #0
 8005da2:	f000 80d1 	beq.w	8005f48 <_printf_i+0x1c4>
 8005da6:	2f58      	cmp	r7, #88	@ 0x58
 8005da8:	f000 80b8 	beq.w	8005f1c <_printf_i+0x198>
 8005dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005db4:	e03a      	b.n	8005e2c <_printf_i+0xa8>
 8005db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dba:	2b15      	cmp	r3, #21
 8005dbc:	d8f6      	bhi.n	8005dac <_printf_i+0x28>
 8005dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8005dc4 <_printf_i+0x40>)
 8005dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dc4:	08005e1d 	.word	0x08005e1d
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005dad 	.word	0x08005dad
 8005dd0:	08005dad 	.word	0x08005dad
 8005dd4:	08005dad 	.word	0x08005dad
 8005dd8:	08005dad 	.word	0x08005dad
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005dad 	.word	0x08005dad
 8005de4:	08005dad 	.word	0x08005dad
 8005de8:	08005dad 	.word	0x08005dad
 8005dec:	08005dad 	.word	0x08005dad
 8005df0:	08005f2f 	.word	0x08005f2f
 8005df4:	08005e5b 	.word	0x08005e5b
 8005df8:	08005ee9 	.word	0x08005ee9
 8005dfc:	08005dad 	.word	0x08005dad
 8005e00:	08005dad 	.word	0x08005dad
 8005e04:	08005f51 	.word	0x08005f51
 8005e08:	08005dad 	.word	0x08005dad
 8005e0c:	08005e5b 	.word	0x08005e5b
 8005e10:	08005dad 	.word	0x08005dad
 8005e14:	08005dad 	.word	0x08005dad
 8005e18:	08005ef1 	.word	0x08005ef1
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6032      	str	r2, [r6, #0]
 8005e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e09c      	b.n	8005f6a <_printf_i+0x1e6>
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6031      	str	r1, [r6, #0]
 8005e38:	0606      	lsls	r6, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xbc>
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	e003      	b.n	8005e48 <_printf_i+0xc4>
 8005e40:	0645      	lsls	r5, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xb8>
 8005e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	da03      	bge.n	8005e54 <_printf_i+0xd0>
 8005e4c:	232d      	movs	r3, #45	@ 0x2d
 8005e4e:	426d      	negs	r5, r5
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e54:	4858      	ldr	r0, [pc, #352]	@ (8005fb8 <_printf_i+0x234>)
 8005e56:	230a      	movs	r3, #10
 8005e58:	e011      	b.n	8005e7e <_printf_i+0xfa>
 8005e5a:	6821      	ldr	r1, [r4, #0]
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	0608      	lsls	r0, r1, #24
 8005e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e64:	d402      	bmi.n	8005e6c <_printf_i+0xe8>
 8005e66:	0649      	lsls	r1, r1, #25
 8005e68:	bf48      	it	mi
 8005e6a:	b2ad      	uxthmi	r5, r5
 8005e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e6e:	4852      	ldr	r0, [pc, #328]	@ (8005fb8 <_printf_i+0x234>)
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	bf14      	ite	ne
 8005e74:	230a      	movne	r3, #10
 8005e76:	2308      	moveq	r3, #8
 8005e78:	2100      	movs	r1, #0
 8005e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e7e:	6866      	ldr	r6, [r4, #4]
 8005e80:	60a6      	str	r6, [r4, #8]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	db05      	blt.n	8005e92 <_printf_i+0x10e>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	432e      	orrs	r6, r5
 8005e8a:	f021 0104 	bic.w	r1, r1, #4
 8005e8e:	6021      	str	r1, [r4, #0]
 8005e90:	d04b      	beq.n	8005f2a <_printf_i+0x1a6>
 8005e92:	4616      	mov	r6, r2
 8005e94:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e98:	fb03 5711 	mls	r7, r3, r1, r5
 8005e9c:	5dc7      	ldrb	r7, [r0, r7]
 8005e9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ea2:	462f      	mov	r7, r5
 8005ea4:	42bb      	cmp	r3, r7
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	d9f4      	bls.n	8005e94 <_printf_i+0x110>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d10b      	bne.n	8005ec6 <_printf_i+0x142>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	07df      	lsls	r7, r3, #31
 8005eb2:	d508      	bpl.n	8005ec6 <_printf_i+0x142>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	bfde      	ittt	le
 8005ebc:	2330      	movle	r3, #48	@ 0x30
 8005ebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ec6:	1b92      	subs	r2, r2, r6
 8005ec8:	6122      	str	r2, [r4, #16]
 8005eca:	f8cd a000 	str.w	sl, [sp]
 8005ece:	464b      	mov	r3, r9
 8005ed0:	aa03      	add	r2, sp, #12
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	f7ff fee7 	bl	8005ca8 <_printf_common>
 8005eda:	3001      	adds	r0, #1
 8005edc:	d14a      	bne.n	8005f74 <_printf_i+0x1f0>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b004      	add	sp, #16
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	4832      	ldr	r0, [pc, #200]	@ (8005fbc <_printf_i+0x238>)
 8005ef2:	2778      	movs	r7, #120	@ 0x78
 8005ef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	6831      	ldr	r1, [r6, #0]
 8005efc:	061f      	lsls	r7, r3, #24
 8005efe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f02:	d402      	bmi.n	8005f0a <_printf_i+0x186>
 8005f04:	065f      	lsls	r7, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2ad      	uxthmi	r5, r5
 8005f0a:	6031      	str	r1, [r6, #0]
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	bf44      	itt	mi
 8005f10:	f043 0320 	orrmi.w	r3, r3, #32
 8005f14:	6023      	strmi	r3, [r4, #0]
 8005f16:	b11d      	cbz	r5, 8005f20 <_printf_i+0x19c>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	e7ad      	b.n	8005e78 <_printf_i+0xf4>
 8005f1c:	4826      	ldr	r0, [pc, #152]	@ (8005fb8 <_printf_i+0x234>)
 8005f1e:	e7e9      	b.n	8005ef4 <_printf_i+0x170>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	f023 0320 	bic.w	r3, r3, #32
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	e7f6      	b.n	8005f18 <_printf_i+0x194>
 8005f2a:	4616      	mov	r6, r2
 8005f2c:	e7bd      	b.n	8005eaa <_printf_i+0x126>
 8005f2e:	6833      	ldr	r3, [r6, #0]
 8005f30:	6825      	ldr	r5, [r4, #0]
 8005f32:	6961      	ldr	r1, [r4, #20]
 8005f34:	1d18      	adds	r0, r3, #4
 8005f36:	6030      	str	r0, [r6, #0]
 8005f38:	062e      	lsls	r6, r5, #24
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	d501      	bpl.n	8005f42 <_printf_i+0x1be>
 8005f3e:	6019      	str	r1, [r3, #0]
 8005f40:	e002      	b.n	8005f48 <_printf_i+0x1c4>
 8005f42:	0668      	lsls	r0, r5, #25
 8005f44:	d5fb      	bpl.n	8005f3e <_printf_i+0x1ba>
 8005f46:	8019      	strh	r1, [r3, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	e7bc      	b.n	8005eca <_printf_i+0x146>
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	6032      	str	r2, [r6, #0]
 8005f56:	681e      	ldr	r6, [r3, #0]
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7fa f93f 	bl	80001e0 <memchr>
 8005f62:	b108      	cbz	r0, 8005f68 <_printf_i+0x1e4>
 8005f64:	1b80      	subs	r0, r0, r6
 8005f66:	6060      	str	r0, [r4, #4]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f72:	e7aa      	b.n	8005eca <_printf_i+0x146>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	4632      	mov	r2, r6
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	47d0      	blx	sl
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0ad      	beq.n	8005ede <_printf_i+0x15a>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	079b      	lsls	r3, r3, #30
 8005f86:	d413      	bmi.n	8005fb0 <_printf_i+0x22c>
 8005f88:	68e0      	ldr	r0, [r4, #12]
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	4298      	cmp	r0, r3
 8005f8e:	bfb8      	it	lt
 8005f90:	4618      	movlt	r0, r3
 8005f92:	e7a6      	b.n	8005ee2 <_printf_i+0x15e>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4632      	mov	r2, r6
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	47d0      	blx	sl
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d09d      	beq.n	8005ede <_printf_i+0x15a>
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	68e3      	ldr	r3, [r4, #12]
 8005fa6:	9903      	ldr	r1, [sp, #12]
 8005fa8:	1a5b      	subs	r3, r3, r1
 8005faa:	42ab      	cmp	r3, r5
 8005fac:	dcf2      	bgt.n	8005f94 <_printf_i+0x210>
 8005fae:	e7eb      	b.n	8005f88 <_printf_i+0x204>
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	f104 0619 	add.w	r6, r4, #25
 8005fb6:	e7f5      	b.n	8005fa4 <_printf_i+0x220>
 8005fb8:	08006811 	.word	0x08006811
 8005fbc:	08006822 	.word	0x08006822

08005fc0 <__sflush_r>:
 8005fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	0716      	lsls	r6, r2, #28
 8005fca:	4605      	mov	r5, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	d454      	bmi.n	800607a <__sflush_r+0xba>
 8005fd0:	684b      	ldr	r3, [r1, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dc02      	bgt.n	8005fdc <__sflush_r+0x1c>
 8005fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dd48      	ble.n	800606e <__sflush_r+0xae>
 8005fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fde:	2e00      	cmp	r6, #0
 8005fe0:	d045      	beq.n	800606e <__sflush_r+0xae>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fe8:	682f      	ldr	r7, [r5, #0]
 8005fea:	6a21      	ldr	r1, [r4, #32]
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	d030      	beq.n	8006052 <__sflush_r+0x92>
 8005ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	0759      	lsls	r1, r3, #29
 8005ff6:	d505      	bpl.n	8006004 <__sflush_r+0x44>
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ffe:	b10b      	cbz	r3, 8006004 <__sflush_r+0x44>
 8006000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	2300      	movs	r3, #0
 8006006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006008:	6a21      	ldr	r1, [r4, #32]
 800600a:	4628      	mov	r0, r5
 800600c:	47b0      	blx	r6
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	d106      	bne.n	8006022 <__sflush_r+0x62>
 8006014:	6829      	ldr	r1, [r5, #0]
 8006016:	291d      	cmp	r1, #29
 8006018:	d82b      	bhi.n	8006072 <__sflush_r+0xb2>
 800601a:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <__sflush_r+0x104>)
 800601c:	40ca      	lsrs	r2, r1
 800601e:	07d6      	lsls	r6, r2, #31
 8006020:	d527      	bpl.n	8006072 <__sflush_r+0xb2>
 8006022:	2200      	movs	r2, #0
 8006024:	6062      	str	r2, [r4, #4]
 8006026:	04d9      	lsls	r1, r3, #19
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	6022      	str	r2, [r4, #0]
 800602c:	d504      	bpl.n	8006038 <__sflush_r+0x78>
 800602e:	1c42      	adds	r2, r0, #1
 8006030:	d101      	bne.n	8006036 <__sflush_r+0x76>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	b903      	cbnz	r3, 8006038 <__sflush_r+0x78>
 8006036:	6560      	str	r0, [r4, #84]	@ 0x54
 8006038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800603a:	602f      	str	r7, [r5, #0]
 800603c:	b1b9      	cbz	r1, 800606e <__sflush_r+0xae>
 800603e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006042:	4299      	cmp	r1, r3
 8006044:	d002      	beq.n	800604c <__sflush_r+0x8c>
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fbf4 	bl	8005834 <_free_r>
 800604c:	2300      	movs	r3, #0
 800604e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006050:	e00d      	b.n	800606e <__sflush_r+0xae>
 8006052:	2301      	movs	r3, #1
 8006054:	4628      	mov	r0, r5
 8006056:	47b0      	blx	r6
 8006058:	4602      	mov	r2, r0
 800605a:	1c50      	adds	r0, r2, #1
 800605c:	d1c9      	bne.n	8005ff2 <__sflush_r+0x32>
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0c6      	beq.n	8005ff2 <__sflush_r+0x32>
 8006064:	2b1d      	cmp	r3, #29
 8006066:	d001      	beq.n	800606c <__sflush_r+0xac>
 8006068:	2b16      	cmp	r3, #22
 800606a:	d11e      	bne.n	80060aa <__sflush_r+0xea>
 800606c:	602f      	str	r7, [r5, #0]
 800606e:	2000      	movs	r0, #0
 8006070:	e022      	b.n	80060b8 <__sflush_r+0xf8>
 8006072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006076:	b21b      	sxth	r3, r3
 8006078:	e01b      	b.n	80060b2 <__sflush_r+0xf2>
 800607a:	690f      	ldr	r7, [r1, #16]
 800607c:	2f00      	cmp	r7, #0
 800607e:	d0f6      	beq.n	800606e <__sflush_r+0xae>
 8006080:	0793      	lsls	r3, r2, #30
 8006082:	680e      	ldr	r6, [r1, #0]
 8006084:	bf08      	it	eq
 8006086:	694b      	ldreq	r3, [r1, #20]
 8006088:	600f      	str	r7, [r1, #0]
 800608a:	bf18      	it	ne
 800608c:	2300      	movne	r3, #0
 800608e:	eba6 0807 	sub.w	r8, r6, r7
 8006092:	608b      	str	r3, [r1, #8]
 8006094:	f1b8 0f00 	cmp.w	r8, #0
 8006098:	dde9      	ble.n	800606e <__sflush_r+0xae>
 800609a:	6a21      	ldr	r1, [r4, #32]
 800609c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800609e:	4643      	mov	r3, r8
 80060a0:	463a      	mov	r2, r7
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b0      	blx	r6
 80060a6:	2800      	cmp	r0, #0
 80060a8:	dc08      	bgt.n	80060bc <__sflush_r+0xfc>
 80060aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	4407      	add	r7, r0
 80060be:	eba8 0800 	sub.w	r8, r8, r0
 80060c2:	e7e7      	b.n	8006094 <__sflush_r+0xd4>
 80060c4:	20400001 	.word	0x20400001

080060c8 <_fflush_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	4605      	mov	r5, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	b913      	cbnz	r3, 80060d8 <_fflush_r+0x10>
 80060d2:	2500      	movs	r5, #0
 80060d4:	4628      	mov	r0, r5
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	b118      	cbz	r0, 80060e2 <_fflush_r+0x1a>
 80060da:	6a03      	ldr	r3, [r0, #32]
 80060dc:	b90b      	cbnz	r3, 80060e2 <_fflush_r+0x1a>
 80060de:	f7ff f9af 	bl	8005440 <__sinit>
 80060e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f3      	beq.n	80060d2 <_fflush_r+0xa>
 80060ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060ec:	07d0      	lsls	r0, r2, #31
 80060ee:	d404      	bmi.n	80060fa <_fflush_r+0x32>
 80060f0:	0599      	lsls	r1, r3, #22
 80060f2:	d402      	bmi.n	80060fa <_fflush_r+0x32>
 80060f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060f6:	f7ff fb9a 	bl	800582e <__retarget_lock_acquire_recursive>
 80060fa:	4628      	mov	r0, r5
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7ff ff5f 	bl	8005fc0 <__sflush_r>
 8006102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006104:	07da      	lsls	r2, r3, #31
 8006106:	4605      	mov	r5, r0
 8006108:	d4e4      	bmi.n	80060d4 <_fflush_r+0xc>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	059b      	lsls	r3, r3, #22
 800610e:	d4e1      	bmi.n	80060d4 <_fflush_r+0xc>
 8006110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006112:	f7ff fb8d 	bl	8005830 <__retarget_lock_release_recursive>
 8006116:	e7dd      	b.n	80060d4 <_fflush_r+0xc>

08006118 <__swhatbuf_r>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	460c      	mov	r4, r1
 800611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006120:	2900      	cmp	r1, #0
 8006122:	b096      	sub	sp, #88	@ 0x58
 8006124:	4615      	mov	r5, r2
 8006126:	461e      	mov	r6, r3
 8006128:	da0d      	bge.n	8006146 <__swhatbuf_r+0x2e>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	bf14      	ite	ne
 8006136:	2340      	movne	r3, #64	@ 0x40
 8006138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800613c:	2000      	movs	r0, #0
 800613e:	6031      	str	r1, [r6, #0]
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	b016      	add	sp, #88	@ 0x58
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	466a      	mov	r2, sp
 8006148:	f000 f848 	bl	80061dc <_fstat_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	dbec      	blt.n	800612a <__swhatbuf_r+0x12>
 8006150:	9901      	ldr	r1, [sp, #4]
 8006152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800615a:	4259      	negs	r1, r3
 800615c:	4159      	adcs	r1, r3
 800615e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006162:	e7eb      	b.n	800613c <__swhatbuf_r+0x24>

08006164 <__smakebuf_r>:
 8006164:	898b      	ldrh	r3, [r1, #12]
 8006166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006168:	079d      	lsls	r5, r3, #30
 800616a:	4606      	mov	r6, r0
 800616c:	460c      	mov	r4, r1
 800616e:	d507      	bpl.n	8006180 <__smakebuf_r+0x1c>
 8006170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	2301      	movs	r3, #1
 800617a:	6163      	str	r3, [r4, #20]
 800617c:	b003      	add	sp, #12
 800617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006180:	ab01      	add	r3, sp, #4
 8006182:	466a      	mov	r2, sp
 8006184:	f7ff ffc8 	bl	8006118 <__swhatbuf_r>
 8006188:	9f00      	ldr	r7, [sp, #0]
 800618a:	4605      	mov	r5, r0
 800618c:	4639      	mov	r1, r7
 800618e:	4630      	mov	r0, r6
 8006190:	f7ff fbbc 	bl	800590c <_malloc_r>
 8006194:	b948      	cbnz	r0, 80061aa <__smakebuf_r+0x46>
 8006196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619a:	059a      	lsls	r2, r3, #22
 800619c:	d4ee      	bmi.n	800617c <__smakebuf_r+0x18>
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	f043 0302 	orr.w	r3, r3, #2
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	e7e2      	b.n	8006170 <__smakebuf_r+0xc>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	6020      	str	r0, [r4, #0]
 80061ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061ba:	b15b      	cbz	r3, 80061d4 <__smakebuf_r+0x70>
 80061bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f81d 	bl	8006200 <_isatty_r>
 80061c6:	b128      	cbz	r0, 80061d4 <__smakebuf_r+0x70>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	431d      	orrs	r5, r3
 80061d8:	81a5      	strh	r5, [r4, #12]
 80061da:	e7cf      	b.n	800617c <__smakebuf_r+0x18>

080061dc <_fstat_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d07      	ldr	r5, [pc, #28]	@ (80061fc <_fstat_r+0x20>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	f7fc fa94 	bl	8002716 <_fstat>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	d102      	bne.n	80061f8 <_fstat_r+0x1c>
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	b103      	cbz	r3, 80061f8 <_fstat_r+0x1c>
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop
 80061fc:	20002ca8 	.word	0x20002ca8

08006200 <_isatty_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	@ (800621c <_isatty_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fc fa93 	bl	8002736 <_isatty>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_isatty_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_isatty_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20002ca8 	.word	0x20002ca8

08006220 <_sbrk_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	@ (800623c <_sbrk_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fc fa9c 	bl	8002768 <_sbrk>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_sbrk_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_sbrk_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20002ca8 	.word	0x20002ca8

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
